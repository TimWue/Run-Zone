{"version":3,"sources":["presentation/shared/LocalStorageKeys.tsx","context/RunnerContext.tsx","domain/runner/RunnerRepository.ts","presentation/shared/Styles.ts","presentation/login/Login.tsx","presentation/shared/Path.tsx","domain/map/MapService.ts","presentation/map/component/RenderRuns.tsx","presentation/map/component/RenderPosition.tsx","presentation/map/component/ShowRunControl.tsx","presentation/map/component/MapMask.tsx","presentation/map/wiredComponent/Map.tsx","context/CurrentRunContext.tsx","domain/run/RunRepository.ts","presentation/controls/CurrentRunControls.tsx","presentation/dashboard/InfoCard.tsx","presentation/dashboard/Dashboard.tsx","presentation/startRun/StartRun.tsx","presentation/absolvedRuns/AbsolvedRun.tsx","presentation/absolvedRuns/Pagination.tsx","presentation/absolvedRuns/AbsolvedRuns.tsx","controller/runs/useRunsController.ts","presentation/navigation/Navigation.tsx","presentation/header/Header.tsx","presentation/home/Home.tsx","presentation/navigation/BottomNavigation.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LocalStorageKeys","RunnerContext","createContext","runnerPosition","undefined","runnerSpeed","runner","runs","setRunner","setRuns","addRun","run","setRunnerPosition","position","RunnerContextProvider","children","useState","setRunnerSpeed","geoLocationOptions","enableHighAccuracy","geoLocationErrorCallback","err","console","warn","code","message","geoLocationSuccessCallback","geoPosition","LatLng","coords","latitude","longitude","speed","toFixed","useEffect","navigator","geolocation","watchPosition","Provider","value","oldState","Styles","createRunnerRepository","getRunner","localStorage","getItem","RUNNER","JSON","parse","setItem","stringify","removeRunner","removeItem","Path","Login","props","runnerName","setRunnerName","runnerRepository","useContext","LoginContainer","LoginHeader","LoginName","type","onChange","e","target","placeholder","LoginButton","onClick","log","newRunner","runnerRunIds","styled","h3","FONT_FAMILY_MAIN","FONT_SIZE_LARGER","div","input","button","createMapService","track2Polygon","trackPoints","map","trackPoint","calcArea","polygonPoints","points","poly","polygon","area","RenderRuns","mapService","index","Polyline","positions","track","RenderPosition","useMap","setView","Marker","ShowRunControl","setShowRuns","className","MapMask","showRuns","RunMap","center","zoom","scrollWheelZoom","TileLayer","attribution","url","MapContainer","Map","CurrentRunContext","CurrentRunContextProvider","startTime","setStartTime","setTrackPoints","setRun","isRunning","setIsRunning","startRun","Date","now","stopRun","endTime","addTrackPoint","resetRun","createRunRepository","storageRuns","RUNS","saveRuns","getAllRuns","CurrentRunControls","runRepository","savePositionAsTrack","lat","lng","time","ButtonGroup","size","Button","disabled","variant","InfoCard","property","Container","Property","Value","Content","Dashboard","runTime","setRunTime","runInterval","setRunInterval","id","setInterval","clearInterval","toISOString","substr","StartRun","AbsolvedRun","OuterContainer","AbsolvedRunMap","startPoint","centerFromRun","dragging","zoomControl","InfoContainer","ValueIconContainer","icon","faCalendar","ValueContainer","toDateString","faClock","faRoute","DetailButton","BACKGROUND_COLOR_SECOND","FONT_SIZE_NORMAL","Pagination","n","setOuterStartIndex","setOuterEndIndex","pageSize","setStartIndex","setEndIndex","Math","ceil","maxPage","currentPage","setCurrentPage","newStartindex","newEndindex","changeCurrentPageByButton","change","validateCurrentPage","newPage","PaginationContainer","ChangeButton","PageInput","currentTarget","MaxPage","AbsolvedRuns","startIndex","endIndex","length","slice","useRunsController","initRuns","initRunner","Navigation","show","setShow","controller","DropDownButton","faBars","DropDownContent","Logout","BACKGROUND_COLOR_MAIN","Header","Logo","h2","Home","Welcome","FONT_SIZE_LARGE","BottomNavigation","NavButton","CustomLink","to","NEW","faPlusSquare","faRunning","faBiking","faUserFriends","faCog","Link","HeaderContainer","App","runsController","path","ROOT","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d0ec926a.chunk.js","sourcesContent":["export enum LocalStorageKeys {\n  RUNNER = \"runner\",\n  RUNS = \"runs\",\n}\n","import { createContext, ReactNode, useEffect, useState } from \"react\";\nimport { Runner } from \"../domain/runner/Runner\";\nimport { Run } from \"../domain/run/Run\";\nimport { LatLng } from \"leaflet\";\n\ninterface RunnerProps {\n  runnerPosition: LatLng | undefined;\n  runnerSpeed: string | null;\n  runner: Runner | undefined;\n  setRunner: (runner: Runner | undefined) => void;\n  runs: Run[];\n  setRuns: (runs: Run[]) => void;\n  addRun: (run: Run) => void;\n  setRunnerPosition: (position: LatLng) => void;\n}\nexport const RunnerContext = createContext<RunnerProps>({\n  runnerPosition: undefined,\n  runnerSpeed: null,\n  runner: undefined,\n  runs: [],\n  setRunner(runner: Runner | undefined): void {},\n  setRuns(runs: Run[]): void {},\n  addRun(run: Run): void {},\n  setRunnerPosition(position: LatLng): void {},\n});\n\ninterface ProviderProps {\n  children: ReactNode;\n}\n\nexport const RunnerContextProvider = ({ children }: ProviderProps) => {\n  const [runs, setRuns] = useState<Run[]>([]);\n  const [runnerPosition, setRunnerPosition] = useState<LatLng>();\n  const [runnerSpeed, setRunnerSpeed] = useState<string | null>(null);\n  const [runner, setRunner] = useState<Runner | undefined>();\n  const geoLocationOptions = { enableHighAccuracy: true };\n\n  const addRun = (run: Run) => {\n    setRuns((oldState: Run[]) => [...oldState, run]);\n  };\n\n  const startTracking = () => {\n    navigator.geolocation.watchPosition(\n      geoLocationSuccessCallback,\n      geoLocationErrorCallback,\n      geoLocationOptions\n    );\n  };\n\n  const geoLocationErrorCallback = (err: any) => {\n    console.warn(`ERROR(${err.code}): ${err.message}`);\n  };\n\n  const geoLocationSuccessCallback = (geoPosition: GeolocationPosition) => {\n    setRunnerPosition(\n      new LatLng(geoPosition.coords.latitude, geoPosition.coords.longitude)\n    );\n    geoPosition.coords.speed &&\n      setRunnerSpeed((geoPosition.coords.speed * 3.6).toFixed(1));\n  };\n\n  useEffect(() => {\n    startTracking();\n  }, []);\n\n  return (\n    <RunnerContext.Provider\n      value={{\n        runner,\n        setRunner,\n        runs,\n        setRuns,\n        runnerPosition,\n        setRunnerPosition,\n        addRun,\n        runnerSpeed,\n      }}\n    >\n      {children}\n    </RunnerContext.Provider>\n  );\n};\n","import { Runner } from \"./Runner\";\nimport { LocalStorageKeys } from \"../../presentation/shared/LocalStorageKeys\";\n\nexport interface RunnerRepository {\n  getRunner: () => Runner | undefined;\n  setRunner: (runner: Runner) => void;\n  removeRunner: () => void;\n}\n\nexport const createRunnerRepository = (): RunnerRepository => {\n  const getRunner = () => {\n    const runner = localStorage.getItem(LocalStorageKeys.RUNNER);\n    return runner ? (JSON.parse(runner) as Runner) : undefined;\n  };\n\n  const setRunner = (runner: Runner) => {\n    localStorage.setItem(LocalStorageKeys.RUNNER, JSON.stringify(runner));\n  };\n\n  const removeRunner = () => {\n    localStorage.removeItem(LocalStorageKeys.RUNNER);\n  };\n\n  return {\n    getRunner,\n    setRunner,\n    removeRunner,\n  };\n};\n","export enum Styles {\n  FONT_FAMILY_MAIN = \"Open Sans Condensed, sans-serif\",\n  BACKGROUND_COLOR_MAIN = \"#343a40\",\n  BACKGROUND_COLOR_SECOND = \"#5f9ea0\",\n  FONT_SIZE_NORMAL = \"16px\",\n  FONT_SIZE_LARGER = \"20px\",\n  FONT_SIZE_LARGE = \"24px\",\n}\n","import * as React from \"react\";\nimport { useContext, useState } from \"react\";\nimport { RunnerContext } from \"../../context/RunnerContext\";\nimport { createRunnerRepository } from \"../../domain/runner/RunnerRepository\";\nimport styled from \"styled-components\";\nimport { Styles } from \"../shared/Styles\";\n\ntype Props = {};\nexport const Login = (props: Props) => {\n  const [runnerName, setRunnerName] = useState<string>(\"\");\n  const runnerRepository = createRunnerRepository();\n  const { setRunner } = useContext(RunnerContext);\n\n  const clickHandle = () => {\n    console.log(\"Login \" + runnerName);\n    const newRunner = { runnerName: runnerName, runnerRunIds: [] };\n    runnerRepository.setRunner(newRunner);\n    setRunner(newRunner);\n  };\n\n  return (\n    <LoginContainer>\n      <LoginHeader>Willkommen!</LoginHeader>\n      <LoginName\n        type={\"text\"}\n        onChange={(e) => {\n          setRunnerName(e.target.value);\n        }}\n        value={runnerName}\n        placeholder={\"Wie heißt du?\"}\n      />\n      <LoginButton onClick={clickHandle}>Login</LoginButton>\n    </LoginContainer>\n  );\n};\n\nconst LoginHeader = styled.h3`\n  font-family: ${Styles.FONT_FAMILY_MAIN};\n  font-size: ${Styles.FONT_SIZE_LARGER};\n  text-transform: uppercase;\n  color: #343a40;\n  font-weight: bold;\n  margin: 0 0 30% 0;\n`;\n\nconst LoginContainer = styled.div`\n  width: 20%;\n  min-width: 300px;\n  height: 80%;\n  min-height: 500px;\n  background-color: aliceblue;\n  border-radius: 10px;\n  box-shadow: 10px 10px #282c34;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin: 10% auto auto auto;\n`;\n\nconst LoginName = styled.input`\n  width: 70%;\n  height: 40px;\n  border: none;\n  border-radius: 10px;\n  margin: 5px;\n  text-align: center;\n`;\n\nconst LoginButton = styled.button`\n  width: 70%;\n  height: 50px;\n  background-color: #343a40;\n  color: white;\n  border-radius: 10px;\n  margin: 5px;\n`;\n","export enum Path {\n  ROOT = \"/\",\n  NEW = \"new\",\n  RUNS = \"runs\",\n}\n","import {TrackPoint} from \"../run/TrackPoint\";\nimport {LatLngTuple} from \"leaflet\";\nimport {area, polygon} from \"@turf/turf\";\n\nexport interface MapService {\n  track2Polygon: (trackPoints: TrackPoint[]) => LatLngTuple[];\n  calcArea: (polygonPoints: TrackPoint[]) => number;\n}\n\nexport const createMapService = (): MapService => {\n  return {\n    track2Polygon(trackPoints: TrackPoint[]): LatLngTuple[] {\n      return trackPoints.map((trackPoint) => {\n        return [trackPoint.latitude, trackPoint.longitude];\n      });\n    },\n    calcArea(polygonPoints: TrackPoint[]): number {\n      let points: any = polygonPoints.map((trackPoint) => {\n        return [trackPoint.latitude, trackPoint.longitude];\n      });\n      let poly = polygon([points]);\n      return area(poly) / 1000000; // from m^2 to km^2\n    },\n  };\n};\n","import { Polyline } from \"react-leaflet\";\nimport { FunctionComponent } from \"react\";\nimport { Run } from \"../../../domain/run/Run\";\nimport { createMapService } from \"../../../domain/map/MapService\";\n\ninterface Props {\n  runs: Run[];\n}\n\nexport const RenderRuns: FunctionComponent<Props> = ({ runs }: Props) => {\n  const mapService = createMapService();\n\n  return (\n    <>\n      {runs.map((run, index) => {\n        return (\n          <Polyline\n            positions={mapService.track2Polygon(run.track.trackPoints)}\n          />\n        );\n      })}\n    </>\n  );\n};\n","import { FunctionComponent, useContext, useEffect } from \"react\";\nimport { Marker, useMap } from \"react-leaflet\";\nimport { RunnerContext } from \"../../../context/RunnerContext\";\n\ninterface Props {}\n\nexport const RenderPosition: FunctionComponent<Props> = () => {\n  const { runnerPosition } = useContext(RunnerContext);\n  const map = useMap();\n\n  useEffect(() => {\n    runnerPosition && map.setView(runnerPosition);\n  }, [runnerPosition]);\n\n  return <>{runnerPosition && <Marker position={runnerPosition} />}</>;\n};\n","import { FunctionComponent } from \"react\";\n\ninterface Props {\n  setShowRuns: any;\n}\n\nconst ShowRunControl: FunctionComponent<Props> = ({ setShowRuns }: Props) => {\n  return (\n    <div className=\"leaflet-top leaflet-right\">\n      <div className=\"leaflet-control\">\n        <button onClick={() => setShowRuns((oldState: any) => !oldState)}>\n          Show Runs\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ShowRunControl;\n","import { FunctionComponent, useContext, useEffect, useState } from \"react\";\nimport { MapContainer, TileLayer } from \"react-leaflet\";\nimport { RunnerContext } from \"../../../context/RunnerContext\";\nimport { RenderRuns } from \"./RenderRuns\";\nimport { RenderPosition } from \"./RenderPosition\";\nimport ShowRunControl from \"./ShowRunControl\";\nimport styled from \"styled-components\";\n\ninterface Props {}\n\nexport const MapMask: FunctionComponent<Props> = ({}: Props) => {\n  const { runs } = useContext(RunnerContext);\n  const [showRuns, setShowRuns] = useState(false);\n\n  return (\n    <RunMap\n      className=\"basicMap\"\n      center={[0, 0]}\n      zoom={20}\n      scrollWheelZoom={false}\n    >\n      <TileLayer\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png\"\n      />\n      {showRuns && <RenderRuns runs={runs} />}\n      <RenderPosition />\n      <ShowRunControl setShowRuns={setShowRuns} />\n    </RunMap>\n  );\n};\n\nconst RunMap = styled(MapContainer)`\n  width: 100%;\n  height: 400px;\n  border-radius: 8px;\n`;\n","import { FunctionComponent } from \"react\";\nimport { MapMask } from \"../component/MapMask\";\n\ntype Props = {};\n\nexport const Map: FunctionComponent<Props> = (props: Props) => {\n  //TODO: what do we need this component for?\n  return <MapMask />;\n};\n","import { createContext, ReactNode, useState } from \"react\";\nimport { Run } from \"../domain/run/Run\";\nimport { TrackPoint } from \"../domain/run/TrackPoint\";\n\ninterface CurrentRunProps {\n  startTime: number | undefined;\n  run: Run | undefined;\n  startRun: () => void;\n  stopRun: () => void;\n  addTrackPoint: (trackPoint: TrackPoint) => void;\n  resetRun: () => void;\n  isRunning: boolean;\n  setIsRunning: (isRunning: boolean) => void;\n}\nexport const CurrentRunContext = createContext<CurrentRunProps>(\n  {} as CurrentRunProps\n);\n\ninterface ProviderProps {\n  children: ReactNode;\n}\n\nexport const CurrentRunContextProvider = ({ children }: ProviderProps) => {\n  const [startTime, setStartTime] = useState<number>();\n  const [trackPoints, setTrackPoints] = useState<TrackPoint[]>([]);\n  const [run, setRun] = useState<Run>();\n  const [isRunning, setIsRunning] = useState(false);\n\n  const resetRun = () => {\n    setRun(undefined);\n    setStartTime(undefined);\n    setTrackPoints([]);\n  };\n  const addTrackPoint = (trackPoint: TrackPoint) => {\n    console.log(\"Add TrackPoint: \", trackPoint);\n    setTrackPoints((oldState) => [...oldState, trackPoint]);\n  };\n\n  const startRun = () => {\n    console.log(\"Start Run\");\n    setStartTime(Date.now());\n    setIsRunning(true);\n  };\n\n  const stopRun = () => {\n    console.log(\"Stop Run\");\n    const track = { trackPoints };\n    setRun({\n      track: track,\n      startTime: startTime ? startTime : Date.now(),\n      endTime: Date.now(),\n    });\n    setIsRunning(false);\n  };\n\n  return (\n    <CurrentRunContext.Provider\n      value={{\n        startTime,\n        isRunning,\n        setIsRunning,\n        run,\n        startRun,\n        stopRun,\n        addTrackPoint,\n        resetRun,\n      }}\n    >\n      {children}\n    </CurrentRunContext.Provider>\n  );\n};\n","import { Run } from \"./Run\";\nimport { LocalStorageKeys } from \"../../presentation/shared/LocalStorageKeys\";\n\nexport interface RunRepository {\n  getAllRuns: () => Run[];\n  saveRuns: (runs: Run[]) => void;\n}\n\nexport const createRunRepository = (): RunRepository => {\n  const storageRuns = localStorage.getItem(LocalStorageKeys.RUNS);\n  const runs: Run[] = storageRuns ? JSON.parse(storageRuns) : undefined;\n\n  const getAllRuns = (): Run[] => {\n    return runs;\n  };\n\n  const saveRuns = (runs: Run[]): void => {\n    localStorage.setItem(LocalStorageKeys.RUNS, JSON.stringify(runs));\n  };\n\n  return { saveRuns, getAllRuns };\n};\n","import { FunctionComponent, useContext, useEffect, useState } from \"react\";\nimport { CurrentRunContext } from \"../../context/CurrentRunContext\";\nimport { RunnerContext } from \"../../context/RunnerContext\";\nimport { createRunRepository } from \"../../domain/run/RunRepository\";\nimport { Button, ButtonGroup } from \"react-bootstrap\";\n\ninterface Props {}\n\nexport const CurrentRunControls: FunctionComponent<Props> = () => {\n  const { runnerPosition } = useContext(RunnerContext);\n  const { addTrackPoint, startRun, stopRun, run, resetRun, isRunning } =\n    useContext(CurrentRunContext);\n  const { addRun, runs } = useContext(RunnerContext);\n  const runRepository = createRunRepository();\n\n  useEffect(() => {\n    isRunning && savePositionAsTrack();\n  }, [runnerPosition]);\n\n  const savePositionAsTrack = () => {\n    runnerPosition &&\n      addTrackPoint({\n        latitude: runnerPosition.lat,\n        longitude: runnerPosition.lng,\n        time: Date.now(),\n      });\n  };\n\n  const handleStart = () => {\n    startRun();\n  };\n\n  const handleStop = () => {\n    stopRun();\n  };\n\n  const handleSave = () => {\n    console.log(\"Save run\");\n    runRepository.saveRuns([...runs, run!]);\n    addRun(run!);\n  };\n\n  const handleReset = () => {\n    console.log(\"Reset run\");\n    resetRun();\n  };\n\n  return (\n    <ButtonGroup size=\"lg\">\n      <Button onClick={handleStart} disabled={isRunning} variant=\"dark\">\n        Start\n      </Button>\n      <Button onClick={handleStop} disabled={!isRunning} variant=\"dark\">\n        Stop\n      </Button>\n      <Button onClick={handleSave} disabled={isRunning} variant=\"dark\">\n        Save\n      </Button>\n      <Button onClick={handleReset} disabled={isRunning} variant=\"dark\">\n        Reset\n      </Button>\n    </ButtonGroup>\n  );\n};\n","import * as React from \"react\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { RunnerContext } from \"../../context/RunnerContext\";\nimport { CurrentRunContext } from \"../../context/CurrentRunContext\";\nimport styled from \"styled-components\";\nimport { Styles } from \"../shared/Styles\";\n\ntype Props = {\n  property: string;\n  value: string | number;\n};\n\nexport const InfoCard = ({ property, value }: Props) => {\n  return (\n    <Container>\n      <Property>{property}</Property>\n      <Value>{value}</Value>\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  width: 20%;\n  min-width: 120px;\n  background-color: #555;\n  border-radius: 10px;\n  padding: 10px;\n  margin: 10px 5px 10px 5px;\n`;\n\nconst Content = styled.div`\n  font-family: Open Sans Condensed, sans-serif;\n  font-weight: bold;\n  text-transform: uppercase;\n  color: #eee;\n`;\n\nconst Property = styled(Content)`\n  font-size: ${Styles.FONT_SIZE_LARGER};\n`;\n\nconst Value = styled(Content)`\n  font-size: ${Styles.FONT_SIZE_LARGER};\n`;\n","import * as React from \"react\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { RunnerContext } from \"../../context/RunnerContext\";\nimport { CurrentRunContext } from \"../../context/CurrentRunContext\";\nimport { InfoCard } from \"./InfoCard\";\nimport styled from \"styled-components\";\n\nexport const Dashboard = () => {\n  const { runnerSpeed } = useContext(RunnerContext);\n  const { startTime, isRunning } = useContext(CurrentRunContext);\n  const [runTime, setRunTime] = useState(0);\n  const [runInterval, setRunInterval] = useState<any>();\n\n  const updateRunTime = () => {\n    startTime && setRunTime(Date.now() - startTime);\n  };\n\n  useEffect(() => {\n    if (isRunning) {\n      const id = setInterval(() => {\n        updateRunTime();\n      }, 1000);\n      setRunInterval(id);\n    } else {\n      runInterval && clearInterval(runInterval);\n    }\n  }, [isRunning]);\n\n  return (\n    <Container>\n      <InfoCard\n        property={\"Speed\"}\n        value={runnerSpeed ? runnerSpeed + \" [km/h]\" : \"--\"}\n      />\n      <InfoCard\n        property={\"Time\"}\n        value={new Date(runTime).toISOString().substr(11, 8)}\n      />\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  height: 50%;\n  padding: 5px;\n  flex-wrap: wrap;\n`;\n","import React, { FunctionComponent } from \"react\";\nimport { Map } from \"../map/wiredComponent/Map\";\nimport { CurrentRunControls } from \"../controls/CurrentRunControls\";\nimport { Dashboard } from \"../dashboard/Dashboard\";\n\ninterface Props {}\n\nexport const StartRun: FunctionComponent<Props> = () => {\n  return (\n    <>\n      <Map />\n      <CurrentRunControls />\n      <Dashboard />\n    </>\n  );\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport { MapContainer, Polyline, TileLayer } from \"react-leaflet\";\nimport { Run } from \"../../domain/run/Run\";\nimport { createMapService } from \"../../domain/map/MapService\";\nimport { LatLng } from \"leaflet\";\nimport styled from \"styled-components\";\nimport { Styles } from \"../shared/Styles\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faCalendar,\n  faClock,\n  faRoute,\n} from \"@fortawesome/free-solid-svg-icons\";\n\ninterface Props {\n  run: Run;\n}\n\nexport const AbsolvedRun: FunctionComponent<Props> = ({ run }) => {\n  const centerFromRun = (run: Run): LatLng => {\n    const startPoint = run.track.trackPoints[0];\n    return new LatLng(startPoint.latitude, startPoint.longitude);\n  };\n\n  const mapService = createMapService();\n\n  return (\n    <OuterContainer>\n      <AbsolvedRunMap\n        className=\"basicMap\"\n        center={centerFromRun(run)}\n        zoom={20}\n        dragging={false}\n        zoomControl={false}\n      >\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png\"\n        />\n        <Polyline positions={mapService.track2Polygon(run.track.trackPoints)} />\n      </AbsolvedRunMap>\n      <InfoContainer>\n        <ValueIconContainer>\n          <FontAwesomeIcon icon={faCalendar} />\n          <ValueContainer>\n            {new Date(run.startTime).toDateString()}\n          </ValueContainer>\n        </ValueIconContainer>\n        <ValueIconContainer>\n          <FontAwesomeIcon icon={faClock} />\n          <ValueContainer>\n            {new Date(run.endTime - run.startTime).toISOString().substr(11, 8)}\n          </ValueContainer>\n        </ValueIconContainer>\n        <ValueIconContainer>\n          <FontAwesomeIcon icon={faRoute} />\n          <ValueContainer>10.2 km</ValueContainer>\n        </ValueIconContainer>\n        <DetailButton>Details</DetailButton>\n      </InfoContainer>\n    </OuterContainer>\n  );\n};\n\nconst DetailButton = styled.button`\n  max-width: 150px;\n  background-color: ${Styles.BACKGROUND_COLOR_SECOND};\n  color: #282c34;\n  border: none;\n  border-radius: 5px;\n  box-shadow: 5px 5px 10px #282c34;\n  &:active {\n    box-shadow: 0 0;\n  }\n`;\n\nconst ValueIconContainer = styled.div`\n  color: white;\n  font-size: ${Styles.FONT_SIZE_NORMAL};\n  font-family: ${Styles.FONT_FAMILY_MAIN};\n  display: inline-flex;\n  margin: 5px;\n`;\n\nconst ValueContainer = styled.div`\n  margin-left: 10px;\n`;\n\nconst OuterContainer = styled.div`\n  width: 100%;\n  display: flex;\n  flex-wrap: wrap;\n  box-shadow: 5px 5px 5px #282c34;\n  border-radius: 5px;\n  margin-bottom: 15px;\n`;\n\nconst InfoContainer = styled.div`\n  width: 50%;\n  padding-left: 5px;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst AbsolvedRunMap = styled(MapContainer)`\n  width: 130px;\n  height: 130px;\n  border-radius: 8px;\n  border: none;\n  margin: 5px;\n  z-index: 0:\n`;\n","import React, {\n  Dispatch,\n  FunctionComponent,\n  SetStateAction,\n  useEffect,\n  useState,\n} from \"react\";\nimport { MapContainer, Polyline, TileLayer } from \"react-leaflet\";\nimport { Run } from \"../../domain/run/Run\";\nimport { createMapService } from \"../../domain/map/MapService\";\nimport { LatLng } from \"leaflet\";\nimport styled from \"styled-components\";\nimport { Styles } from \"../shared/Styles\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faCalendar,\n  faClock,\n  faRoute,\n} from \"@fortawesome/free-solid-svg-icons\";\n\ninterface Props {\n  n: number;\n  setOuterStartIndex: (endIndex: number | undefined) => void;\n  setOuterEndIndex: (endIndex: number | undefined) => void;\n}\n\nexport const Pagination: FunctionComponent<Props> = ({\n  n,\n  setOuterStartIndex,\n  setOuterEndIndex,\n}) => {\n  const [pageSize, setPageSize] = useState(3);\n  const [startIndex, setStartIndex] = useState(0);\n  const [endIndex, setEndIndex] = useState(pageSize);\n  const [maxPage, setMaxPage] = useState(Math.ceil(n / pageSize));\n  const [currentPage, setCurrentPage] = useState(1);\n\n  useEffect(() => {\n    let newStartindex = (currentPage - 1) * pageSize;\n    let newEndindex =\n      newStartindex + pageSize > n ? n : newStartindex + pageSize;\n\n    setStartIndex(newStartindex);\n    setOuterStartIndex(newStartindex);\n    setEndIndex(newEndindex);\n    setOuterEndIndex(newEndindex);\n  }, [pageSize, currentPage]);\n\n  const changeCurrentPageByButton = (change: number) => {\n    setCurrentPage(validateCurrentPage(currentPage + change));\n  };\n\n  const changeCurrentPageByInput = (e: React.FormEvent<HTMLInputElement>) => {\n    setCurrentPage(validateCurrentPage(+e.currentTarget.value));\n  };\n\n  const validateCurrentPage = (newPage: number): number => {\n    if (newPage > maxPage) {\n      newPage = maxPage;\n    }\n    if (newPage < 1) {\n      newPage = 1;\n    }\n    return newPage;\n  };\n\n  return (\n    <PaginationContainer>\n      <ChangeButton onClick={() => changeCurrentPageByButton(-1)}>\n        {\"<\"}\n      </ChangeButton>\n      <PageInput onChange={changeCurrentPageByInput} value={currentPage} />\n      <MaxPage> / {maxPage}</MaxPage>\n      <ChangeButton onClick={() => changeCurrentPageByButton(1)}>\n        {\">\"}\n      </ChangeButton>\n    </PaginationContainer>\n  );\n};\n\nconst ChangeButton = styled.button`\n  background-color: #343a40;\n  color: white;\n  border: 1px white;\n`;\nconst MaxPage = styled.div`\n  font-size: inherit;\n  width: 30px;\n  padding: 2px 5px;\n`;\n\nconst PageInput = styled.input`\n  width: 25px;\n  text-align: center;\n  font-size: inherit;\n`;\nconst PaginationContainer = styled.div`\n  color: white;\n  display: flex;\n  font-size: ${Styles.FONT_SIZE_NORMAL};\n  float: right;\n`;\n","import React, {\n  FunctionComponent,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Map } from \"../map/wiredComponent/Map\";\nimport { CurrentRunControls } from \"../controls/CurrentRunControls\";\nimport { Dashboard } from \"../dashboard/Dashboard\";\nimport { MapContainer, Polyline, TileLayer, useMap } from \"react-leaflet\";\nimport { RenderRuns } from \"../map/component/RenderRuns\";\nimport { RenderPosition } from \"../map/component/RenderPosition\";\nimport ShowRunControl from \"../map/component/ShowRunControl\";\nimport { Button } from \"react-bootstrap\";\nimport { RunnerContext } from \"../../context/RunnerContext\";\nimport { Run } from \"../../domain/run/Run\";\nimport { createRunRepository } from \"../../domain/run/RunRepository\";\nimport { createMapService } from \"../../domain/map/MapService\";\nimport { LatLng } from \"leaflet\";\nimport { ViewChanger } from \"./ViewChanger\";\nimport styled from \"styled-components\";\nimport { AbsolvedRun } from \"./AbsolvedRun\";\nimport { Styles } from \"../shared/Styles\";\nimport { Pagination } from \"./Pagination\";\n\ninterface Props {}\n\nexport const AbsolvedRuns: FunctionComponent<Props> = () => {\n  const { runs } = useContext(RunnerContext);\n  const [startIndex, setStartIndex] = useState<number>();\n  const [endIndex, setEndIndex] = useState<number>();\n\n  return (\n    <>\n      <Pagination\n        n={runs.length}\n        setOuterStartIndex={setStartIndex}\n        setOuterEndIndex={setEndIndex}\n      />\n\n      {runs.slice(startIndex, endIndex).map((run) => (\n        <AbsolvedRun run={run} />\n      ))}\n    </>\n  );\n};\n","import { createRunRepository } from \"../../domain/run/RunRepository\";\nimport { createRunnerRepository } from \"../../domain/runner/RunnerRepository\";\nimport { useContext } from \"react\";\nimport { RunnerContext } from \"../../context/RunnerContext\";\n\nexport interface RunsController {\n  initRuns: () => void;\n  initRunner: () => void;\n  removeRunner: () => void;\n}\n\nexport const useRunsController = (): RunsController => {\n  const { setRunner, setRuns } = useContext(RunnerContext);\n  const runRepository = createRunRepository();\n  const runnerRepository = createRunnerRepository();\n\n  const initRuns = () => {\n    setRuns(runRepository.getAllRuns());\n  };\n\n  const initRunner = () => {\n    setRunner(runnerRepository.getRunner());\n  };\n\n  const removeRunner = () => {\n    setRunner(undefined);\n    runnerRepository.removeRunner();\n  };\n\n  return { initRuns, initRunner, removeRunner };\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport { Path } from \"../shared/Path\";\nimport { NavLink } from \"./NavLink\";\nimport { useRunsController } from \"../../controller/runs/useRunsController\";\nimport styled from \"styled-components\";\nimport { Styles } from \"../shared/Styles\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faBars } from \"@fortawesome/free-solid-svg-icons\";\n\nexport const Navigation: FunctionComponent = () => {\n  const [show, setShow] = useState(false);\n  const controller = useRunsController();\n  return (\n    <DropDownButton onClick={() => setShow(!show)}>\n      <FontAwesomeIcon icon={faBars} />\n      <DropDownContent show={show}>\n        <Logout onClick={() => controller.removeRunner()}>Logout</Logout>\n      </DropDownContent>\n    </DropDownButton>\n  );\n};\n\nconst DropDownButton = styled.div`\n  position: relative;\n  display: inline-block;\n  color: white;\n  font-size: ${Styles.FONT_SIZE_LARGER};\n`;\n\ninterface Props {\n  show: boolean;\n}\nconst DropDownContent = styled.div<Props>`\n  color: white;\n  background-color: ${Styles.BACKGROUND_COLOR_MAIN};\n  display: ${(props) => (props.show ? \"block\" : \"none\")};\n  position: absolute;\n  z-index: 1;\n  right: -200%;\n  box-shadow: 0px 0px 10px #282c34;\n  width: 100px;\n`;\nconst Logout = styled.div`\n  text-align: center;\n  font-size: ${Styles.FONT_SIZE_LARGER};\n  border: none;\n  cursor: pointer;\n  &:hover {\n    background-color: aliceblue;\n    color: #282c34;\n  }\n`;\n","import * as React from \"react\";\nimport { Navigation } from \"../navigation/Navigation\";\nimport styled from \"styled-components\";\nimport { Styles } from \"../shared/Styles\";\n\nexport const Header = () => {\n  return (\n    <>\n      <Logo>Run Zone</Logo>\n      <Navigation />\n    </>\n  );\n};\n\nconst Logo = styled.h2`\n  color: #eee;\n  font-family: Open Sans Condensed, sans-serif;\n  font-size: ${Styles.FONT_SIZE_LARGER};\n  font-weight: bold;\n  line-height: 48px;\n  padding: 0 5px;\n  text-align: center;\n  text-transform: uppercase;\n  min-width: 200px;\n`;\n","import * as React from \"react\";\nimport { useContext } from \"react\";\nimport { RunnerContext } from \"../../context/RunnerContext\";\nimport styled from \"styled-components\";\nimport { Styles } from \"../shared/Styles\";\n\nexport const Home = () => {\n  const { runner } = useContext(RunnerContext);\n\n  return (\n    <Container>\n      <Welcome>\n        Willkommen\n        <br />\n        {runner!.runnerName}\n      </Welcome>\n    </Container>\n  );\n};\n\nconst Welcome = styled.h3`\n  font-family: ${Styles.FONT_FAMILY_MAIN};\n  text-align: center;\n  font-size: ${Styles.FONT_SIZE_LARGE};\n  color: white;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 10% 0 0 0;\n`;\n","import React, { FunctionComponent, useState } from \"react\";\nimport { Path } from \"../shared/Path\";\nimport { NavLink } from \"./NavLink\";\nimport { useRunsController } from \"../../controller/runs/useRunsController\";\nimport styled from \"styled-components\";\nimport { Styles } from \"../shared/Styles\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faBars,\n  faBiking,\n  faCog,\n  faPlusSquare,\n  faRoute,\n  faRunning,\n  faUserFriends,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { Link } from \"react-router-dom\";\n\nexport const BottomNavigation: FunctionComponent = () => {\n  return (\n    <Container>\n      <NavButton>\n        <CustomLink to={Path.NEW}>\n          <FontAwesomeIcon icon={faPlusSquare} />\n        </CustomLink>\n      </NavButton>\n      <NavButton>\n        <CustomLink to={Path.RUNS}>\n          <FontAwesomeIcon icon={faRunning} />\n        </CustomLink>\n      </NavButton>\n      <NavButton>\n        <FontAwesomeIcon icon={faBiking} />\n      </NavButton>\n      <NavButton>\n        <FontAwesomeIcon icon={faUserFriends} />\n      </NavButton>\n      <NavButton>\n        <FontAwesomeIcon icon={faCog} />\n      </NavButton>\n    </Container>\n  );\n};\n\nconst CustomLink = styled(Link)`\n  color: inherit;\n  font-size: inherit;\n  &:hover {\n    color: inherit;\n    background-color: inherit;\n  }\n`;\n\nconst Container = styled.div`\n  background-color: #282c34;\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  display: flex;\n  flex-wrap: nowrap;\n  z-index: 1000;\n`;\n\nconst NavButton = styled.button`\n  height: 60px;\n  width: 20%;\n  display: block;\n  color: white;\n  text-align: center;\n  padding: 14px 16px;\n  text-decoration: none;\n  font-size: ${Styles.FONT_SIZE_LARGER};\n  border: 1px solid black;\n  background-color: inherit;\n`;\n","import React, { useContext, useEffect } from \"react\";\nimport \"./App.css\";\nimport { RunnerContext } from \"./context/RunnerContext\";\nimport { Login } from \"./presentation/login/Login\";\nimport { StartRun } from \"./presentation/startRun/StartRun\";\nimport { AbsolvedRuns } from \"./presentation/absolvedRuns/AbsolvedRuns\";\nimport { Path } from \"./presentation/shared/Path\";\nimport { Route, Routes } from \"react-router-dom\";\nimport { Header } from \"./presentation/header/Header\";\nimport { Home } from \"./presentation/home/Home\";\nimport { useRunsController } from \"./controller/runs/useRunsController\";\nimport styled from \"styled-components\";\nimport { BottomNavigation } from \"./presentation/navigation/BottomNavigation\";\n\nfunction App() {\n  const { runner } = useContext(RunnerContext);\n  const runsController = useRunsController();\n\n  useEffect(() => {\n    runsController.initRuns();\n    runsController.initRunner();\n  }, []);\n\n  if (!runner) {\n    return (\n      <OuterContainer>\n        <Login />\n      </OuterContainer>\n    );\n  }\n  return (\n    <OuterContainer>\n      <HeaderContainer>\n        <Header />\n      </HeaderContainer>\n\n      <Routes>\n        <Route path={Path.ROOT} element={<Home />} />\n        <Route path={Path.NEW} element={<StartRun />} />\n        <Route path={Path.RUNS} element={<AbsolvedRuns />} />\n      </Routes>\n      <BottomNavigation />\n    </OuterContainer>\n  );\n}\nconst OuterContainer = styled.div`\n  width: 80%;\n  height: 100%;\n  margin: auto;\n`;\n\nconst HeaderContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  padding: 1% 0 1% 0;\n  flex-wrap: wrap;\n  margin: 20px 0 20px 0;\n`;\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { RunnerContextProvider } from \"./context/RunnerContext\";\nimport { CurrentRunContextProvider } from \"./context/CurrentRunContext\";\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RunnerContextProvider>\n      <CurrentRunContextProvider>\n        <HashRouter>\n          <App />\n        </HashRouter>\n      </CurrentRunContextProvider>\n    </RunnerContextProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}