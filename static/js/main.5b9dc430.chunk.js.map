{"version":3,"sources":["domain/runner/RunnerService.ts","context/RunnerContext.tsx","domain/map/MapService.ts","presentation/map/component/RenderRuns.tsx","presentation/map/component/RenderPosition.tsx","presentation/map/component/MapMask.tsx","resources/Runners.ts","domain/runner/RunnerRepository.ts","domain/run/RunRepository.ts","presentation/map/wiredComponent/Map.tsx","controller/runnerRuns/useRunnerRunsController.ts","presentation/dashboard/Dashboard.tsx","presentation/login/Login.tsx","presentation/header/Header.tsx","context/CurrentRunContext.tsx","presentation/controls/CurrentRunControls.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["createRunnerService","runnerRepository","runRepository","getRuns","runnerName","runs","getTracks","runIds","Promise","all","map","runId","a","getRun","run","push","getRunner","runner","RunnerContext","createContext","runnerPosition","undefined","runnerRunIds","setRunner","setRuns","addRun","setRunnerPosition","position","RunnerContextProvider","children","useState","Provider","value","oldState","createMapService","track2Polygon","trackPoints","trackPoint","latitude","longitude","calcArea","polygonPoints","points","poly","polygon","area","RenderRuns","mapService","index","Polyline","positions","track","RenderPosition","useContext","useMap","useEffect","navigator","geolocation","getCurrentPosition","geoPosition","LatLng","coords","setView","Marker","MapMask","runnersRunController","showRuns","setShowRuns","getRunsOfRunner","then","runsReceived","style","width","height","MapContainer","className","center","zoom","scrollWheelZoom","TileLayer","attribution","url","onClick","runners","createRunnerRepository","resolve","find","createRunRepository","storageRuns","localStorage","getItem","JSON","parse","saveRuns","setItem","stringify","Map","props","runnerService","useCallback","useRunnerRunsController","Dashboard","totalArea","setTotalArea","reduce","sum","current","toFixed","Login","setRunnerName","type","onChange","e","target","placeholder","console","log","Header","CurrentRunContext","CurrentRunContextProvider","startTime","setStartTime","setTrackPoints","setRun","startRun","Date","now","stopRun","endTime","addTrackPoint","CurrentRunControls","runInterval","setRunInterval","interval","setInterval","time","clearInterval","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5b9dc430.chunk.js","sourcesContent":["import { RunnerRepository } from \"./RunnerRepository\";\nimport { RunRepository } from \"../run/RunRepository\";\nimport { Run } from \"../run/Run\";\nimport { Runner } from \"./Runner\";\n\nexport interface RunnerService {\n  getRuns: (runnerName: string) => Promise<Run[]>;\n  getRunner: (runnerName: string) => Promise<Runner | undefined>;\n}\n\nexport const createRunnerService = (\n  runnerRepository: RunnerRepository,\n  runRepository: RunRepository\n): RunnerService => {\n  return {\n    async getRuns(runnerName: string): Promise<Run[]> {\n      const runs: Run[] = [];\n      const runIds = await runnerRepository.getTracks(runnerName);\n      await Promise.all(\n        runIds.map(async (runId) => {\n          const run = await runRepository.getRun(runId);\n          run && runs.push(run);\n        })\n      );\n      return runs;\n    },\n    async getRunner(runnerName: string): Promise<Runner | undefined> {\n      let runner = await runnerRepository.getRunner(runnerName);\n      return runner;\n    },\n  };\n};\n","import { createContext, ReactNode, useState } from \"react\";\nimport { Runner } from \"../domain/runner/Runner\";\nimport { Run } from \"../domain/run/Run\";\nimport { LatLng } from \"leaflet\";\n\ninterface RunnerProps {\n  runnerPosition: LatLng | undefined;\n  runner: Runner;\n  setRunner: (runner: Runner) => void;\n  runs: Run[];\n  setRuns: (runs: Run[]) => void;\n  addRun: (run: Run) => void;\n  setRunnerPosition: (position: LatLng) => void;\n}\nexport const RunnerContext = createContext<RunnerProps>({\n  runnerPosition: undefined,\n  runner: { runnerName: \"\", runnerRunIds: [] },\n  runs: [],\n  setRunner(runner: Runner): void {},\n  setRuns(runs: Run[]): void {},\n  addRun(run: Run): void {},\n  setRunnerPosition(position: LatLng): void {},\n});\n\ninterface ProviderProps {\n  children: ReactNode;\n}\n\nexport const RunnerContextProvider = ({ children }: ProviderProps) => {\n  const [runnerPosition, setRunnerPosition] = useState<LatLng>();\n\n  const [runner, setRunner] = useState<Runner>({\n    runnerName: \"\",\n    runnerRunIds: [],\n  });\n  const [runs, setRuns] = useState<Run[]>([]);\n\n  const addRun = (run: Run) => {\n    setRuns((oldState: Run[]) => [...oldState, run]);\n  };\n\n  return (\n    <RunnerContext.Provider\n      value={{\n        runner,\n        setRunner,\n        runs,\n        setRuns,\n        runnerPosition,\n        setRunnerPosition,\n        addRun,\n      }}\n    >\n      {children}\n    </RunnerContext.Provider>\n  );\n};\n","import {TrackPoint} from \"../run/TrackPoint\";\nimport {LatLngTuple} from \"leaflet\";\nimport {area, polygon} from \"@turf/turf\";\n\nexport interface MapService {\n  track2Polygon: (trackPoints: TrackPoint[]) => LatLngTuple[];\n  calcArea: (polygonPoints: TrackPoint[]) => number;\n}\n\nexport const createMapService = (): MapService => {\n  return {\n    track2Polygon(trackPoints: TrackPoint[]): LatLngTuple[] {\n      return trackPoints.map((trackPoint) => {\n        return [trackPoint.latitude, trackPoint.longitude];\n      });\n    },\n    calcArea(polygonPoints: TrackPoint[]): number {\n      let points: any = polygonPoints.map((trackPoint) => {\n        return [trackPoint.latitude, trackPoint.longitude];\n      });\n      let poly = polygon([points]);\n      return area(poly) / 1000000; // from m^2 to km^2\n    },\n  };\n};\n","import { Polyline } from \"react-leaflet\";\nimport { FunctionComponent } from \"react\";\nimport { Run } from \"../../../domain/run/Run\";\nimport { createMapService } from \"../../../domain/map/MapService\";\n\ninterface Props {\n  runs: Run[];\n}\n\nexport const RenderRuns: FunctionComponent<Props> = ({ runs }: Props) => {\n  const mapService = createMapService();\n\n  return (\n    <>\n      {runs.map((run, index) => {\n        return (\n          <Polyline\n            positions={mapService.track2Polygon(run.track.trackPoints)}\n          />\n        );\n      })}\n    </>\n  );\n};\n","import { FunctionComponent, useContext, useEffect, useState } from \"react\";\nimport { Marker, useMap } from \"react-leaflet\";\nimport { LatLng } from \"leaflet\";\nimport { RunnerContext } from \"../../../context/RunnerContext\";\n\ninterface Props {}\n\nexport const RenderPosition: FunctionComponent<Props> = () => {\n  const { runnerPosition, setRunnerPosition } = useContext(RunnerContext);\n  const map = useMap();\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(function (geoPosition) {\n      setRunnerPosition(\n        new LatLng(geoPosition.coords.latitude, geoPosition.coords.longitude)\n      );\n    });\n  }, []);\n\n  useEffect(() => {\n    runnerPosition && map.setView(runnerPosition);\n  }, [runnerPosition]);\n\n  return <>{runnerPosition && <Marker position={runnerPosition} />}</>;\n};\n","import { FunctionComponent, useContext, useEffect, useState } from \"react\";\nimport { MapContainer, TileLayer } from \"react-leaflet\";\nimport { RunnerRunsController } from \"../../../controller/runnerRuns/useRunnerRunsController\";\nimport { RunnerContext } from \"../../../context/RunnerContext\";\nimport { RenderRuns } from \"./RenderRuns\";\nimport { RenderPosition } from \"./RenderPosition\";\n\ninterface Props {\n  runnersRunController: RunnerRunsController;\n}\nexport const MapMask: FunctionComponent<Props> = ({\n  runnersRunController,\n}: Props) => {\n  const { runner, runs, setRuns } = useContext(RunnerContext);\n  const [showRuns, setShowRuns] = useState(false);\n\n  useEffect(() => {\n    runnersRunController\n      .getRunsOfRunner(runner.runnerName)\n      .then((runsReceived) => {\n        setRuns(runsReceived);\n      });\n  }, [runner]);\n\n  return (\n    <div style={{ width: \"100%\", height: \"50%\" }}>\n      <MapContainer\n        className=\"basicMap\"\n        center={[0, 0]}\n        zoom={13}\n        scrollWheelZoom={false}\n      >\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png\"\n        />\n        {showRuns && <RenderRuns runs={runs} />}\n        <RenderPosition />\n      </MapContainer>\n      <button onClick={() => setShowRuns(!showRuns)}>Show Runs</button>\n    </div>\n  );\n};\n","import { Runner } from \"../domain/runner/Runner\";\n\nexport const runners: Runner[] = [\n  { runnerName: \"Tim\", runnerRunIds: [] },\n  { runnerName: \"Leonie\", runnerRunIds: [3] },\n];\n","import { runners } from \"../../resources/Runners\";\nimport { Runner } from \"./Runner\";\n\nexport interface RunnerRepository {\n  getTracks: (runnerName: string) => Promise<number[]>;\n  getRunner: (runnerName: string) => Promise<Runner | undefined>;\n}\n\nexport const createRunnerRepository = (): RunnerRepository => {\n  return {\n    getTracks(runnerName: string): Promise<number[]> {\n      let runIds: number[] = [];\n      for (let index in runners) {\n        if (runners[index].runnerName === runnerName) {\n          runIds = runners[index].runnerRunIds;\n        }\n      }\n      return Promise.resolve(runIds);\n    },\n    getRunner(runnerName: string): Promise<Runner | undefined> {\n      return Promise.resolve(\n        runners.find((runner: Runner) => runner.runnerName === runnerName)\n      );\n    },\n  };\n};\n","import { Run } from \"./Run\";\n\nexport interface RunRepository {\n  getRun: (runId: number) => Promise<Run | undefined>;\n  saveRuns: (runs: Run[]) => void;\n}\n\nexport const createRunRepository = (): RunRepository => {\n  const storageRuns = localStorage.getItem(\"runs\");\n  const runs: Run[] = storageRuns ? JSON.parse(storageRuns) : undefined;\n\n  const getRun = (runId: number): Promise<Run | undefined> => {\n    let run: Run | undefined = undefined;\n    for (let index in runs) {\n      if (runs[index].runId === runId) {\n        run = runs[index];\n      }\n    }\n    return Promise.resolve(run);\n  };\n\n  const saveRuns = (runs: Run[]): void => {\n    localStorage.setItem(\"runs\", JSON.stringify(runs));\n  };\n\n  return { getRun, saveRuns };\n};\n","import { FunctionComponent } from \"react\";\n\nimport { createRunnerService } from \"../../../domain/runner/RunnerService\";\nimport { MapMask } from \"../component/MapMask\";\nimport { useRunnerRunsController } from \"../../../controller/runnerRuns/useRunnerRunsController\";\nimport { createRunnerRepository } from \"../../../domain/runner/RunnerRepository\";\nimport { createRunRepository } from \"../../../domain/run/RunRepository\";\n\ntype Props = {};\n\nexport const Map: FunctionComponent<Props> = (props: Props) => {\n  const runnerRepository = createRunnerRepository();\n  const runRepository = createRunRepository();\n  const runnerService = createRunnerService(runnerRepository, runRepository);\n\n  const runnersRunController = useRunnerRunsController(runnerService);\n  return <MapMask runnersRunController={runnersRunController}></MapMask>;\n};\n","import { RunnerService } from \"../../domain/runner/RunnerService\";\nimport { Run } from \"../../domain/run/Run\";\nimport { useCallback } from \"react\";\n\nexport interface RunnerRunsController {\n  getRunsOfRunner: (runnerName: string) => Promise<Run[]>;\n}\n\nexport const useRunnerRunsController = (\n  runnerService: RunnerService\n): RunnerRunsController => {\n  const getRunsOfRunner = useCallback(\n    (runnerName: string): Promise<Run[]> => {\n      return runnerService.getRuns(runnerName);\n    },\n    [runnerService]\n  );\n\n  return { getRunsOfRunner };\n};\n","import * as React from \"react\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { RunnerContext } from \"../../context/RunnerContext\";\nimport { createMapService, MapService } from \"../../domain/map/MapService\";\nimport { Run } from \"../../domain/run/Run\";\n\ntype Props = {};\nexport const Dashboard = (props: Props) => {\n  const [totalArea, setTotalArea] = useState<number>(0);\n  const { runs } = useContext(RunnerContext);\n  const mapService: MapService = createMapService();\n\n  useEffect(() => {\n    setTotalArea(\n      runs\n        .map((run: Run) => {\n          return mapService.calcArea(run.track.trackPoints);\n        })\n        .reduce((sum, current) => {\n          return sum + current;\n        }, 0)\n    );\n  }, [runs]);\n  return <div>Area: {totalArea.toFixed(2)} [km^2]</div>;\n};\n","import * as React from \"react\";\nimport { useContext, useState } from \"react\";\nimport { RunnerContext } from \"../../context/RunnerContext\";\nimport { createRunnerService } from \"../../domain/runner/RunnerService\";\nimport { createRunnerRepository } from \"../../domain/runner/RunnerRepository\";\nimport { createRunRepository } from \"../../domain/run/RunRepository\";\n\ntype Props = {};\nexport const Login = (props: Props) => {\n  const [runnerName, setRunnerName] = useState<string>(\"\");\n  const runnerRepository = createRunnerRepository();\n  const runRepository = createRunRepository();\n  const runnerService = createRunnerService(runnerRepository, runRepository);\n  const { setRunner } = useContext(RunnerContext);\n\n  const clickHandle = () => {\n    console.log(\"Login \" + runnerName);\n    runnerService.getRunner(runnerName).then((runner: any) => {\n      if (runner) {\n        setRunner(runner!);\n      }\n    });\n  };\n\n  return (\n    <div>\n      <input\n        type={\"text\"}\n        onChange={(e) => {\n          setRunnerName(e.target.value);\n        }}\n        value={runnerName}\n        placeholder={\"Enter your Name:\"}\n      />\n      <button onClick={clickHandle}>Login</button>\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport { useContext } from \"react\";\nimport { RunnerContext } from \"../../context/RunnerContext\";\n\ntype Props = {};\nexport const Header = (props: Props) => {\n  const { runner } = useContext(RunnerContext);\n  return <div>Hello {runner.runnerName}</div>;\n};\n","import { createContext, ReactNode, useState } from \"react\";\nimport { Run } from \"../domain/run/Run\";\nimport { TrackPoint } from \"../domain/run/TrackPoint\";\n\ninterface CurrentRunProps {\n  run: Run | undefined;\n  startRun: () => void;\n  stopRun: () => void;\n  addTrackPoint: (trackPoint: TrackPoint) => void;\n}\nexport const CurrentRunContext = createContext<CurrentRunProps>(\n  {} as CurrentRunProps\n);\n\ninterface ProviderProps {\n  children: ReactNode;\n}\n\nexport const CurrentRunContextProvider = ({ children }: ProviderProps) => {\n  const [startTime, setStartTime] = useState<number>();\n  const [trackPoints, setTrackPoints] = useState<TrackPoint[]>([]);\n  const [run, setRun] = useState<Run>();\n\n  const addTrackPoint = (trackPoint: TrackPoint) => {\n    console.log(\"Add TrackPoint: \", trackPoint);\n    setTrackPoints((oldState) => [...oldState, trackPoint]);\n  };\n\n  const startRun = () => {\n    console.log(\"Start Run\");\n    setStartTime(Date.now());\n  };\n\n  const stopRun = () => {\n    console.log(\"Stop Run\");\n    const track = { trackPoints };\n    setRun({\n      track: track,\n      startTime: startTime ? startTime : Date.now(),\n      endTime: Date.now(),\n    });\n  };\n\n  return (\n    <CurrentRunContext.Provider\n      value={{\n        run,\n        startRun,\n        stopRun,\n        addTrackPoint,\n      }}\n    >\n      {children}\n    </CurrentRunContext.Provider>\n  );\n};\n","import { FunctionComponent, useContext, useState } from \"react\";\nimport { CurrentRunContext } from \"../../context/CurrentRunContext\";\nimport { RunnerContext } from \"../../context/RunnerContext\";\nimport { createRunRepository } from \"../../domain/run/RunRepository\";\n\ninterface Props {}\n\nexport const CurrentRunControls: FunctionComponent<Props> = () => {\n  const intervalDuration = 2000;\n  const { addTrackPoint, startRun, stopRun, run } =\n    useContext(CurrentRunContext);\n  const { addRun, runs } = useContext(RunnerContext);\n  const [runInterval, setRunInterval] = useState<any>();\n  const runRepository = createRunRepository();\n\n  const handleStart = () => {\n    startRun();\n    const interval = setInterval(() => {\n      navigator.geolocation.getCurrentPosition(function (geoPosition) {\n        addTrackPoint({\n          latitude: geoPosition.coords.latitude,\n          longitude: geoPosition.coords.longitude,\n          time: Date.now(),\n        });\n      });\n    }, intervalDuration);\n    setRunInterval(interval);\n  };\n\n  const handleStop = () => {\n    stopRun();\n    clearInterval(runInterval);\n  };\n\n  const handleSave = () => {\n    runRepository.saveRuns([...runs, run!]);\n    addRun(run!);\n  };\n\n  return (\n    <>\n      <button onClick={handleStart}>Start</button>\n      <button onClick={handleStop}>Stop</button>\n      <button onClick={handleSave}>Save</button>\n    </>\n  );\n};\n","import React, { useContext } from \"react\";\nimport \"./App.css\";\nimport { Map } from \"./presentation/map/wiredComponent/Map\";\nimport { Dashboard } from \"./presentation/dashboard/Dashboard\";\nimport { RunnerContext } from \"./context/RunnerContext\";\nimport { Login } from \"./presentation/login/Login\";\nimport { Header } from \"./presentation/header/Header\";\nimport { CurrentRunControls } from \"./presentation/controls/CurrentRunControls\";\n\nfunction App() {\n  const { runner } = useContext(RunnerContext);\n  return (\n    <>\n      {runner?.runnerName === \"\" ? (\n        <Login />\n      ) : (\n        <>\n          <Header />\n          <Map />\n          <Dashboard />\n          <CurrentRunControls />\n        </>\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { RunnerContextProvider } from \"./context/RunnerContext\";\nimport { CurrentRunContextProvider } from \"./context/CurrentRunContext\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RunnerContextProvider>\n      <CurrentRunContextProvider>\n        <App />\n      </CurrentRunContextProvider>\n    </RunnerContextProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}