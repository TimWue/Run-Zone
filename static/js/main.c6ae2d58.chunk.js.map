{"version":3,"sources":["presentation/shared/Path.tsx","context/RunnerContext.tsx","domain/runner/RunnerService.ts","resources/Runners.ts","domain/runner/RunnerRepository.ts","domain/run/RunRepository.ts","presentation/login/Login.tsx","presentation/map/component/RenderRuns.tsx","domain/map/MapService.ts","presentation/map/component/RenderPosition.tsx","presentation/map/component/ShowRunControl.tsx","presentation/map/component/MapMask.tsx","presentation/map/wiredComponent/Map.tsx","controller/runnerRuns/useRunnerRunsController.ts","context/CurrentRunContext.tsx","presentation/controls/CurrentRunControls.tsx","presentation/dashboard/InfoCard.tsx","presentation/dashboard/Dashboard.tsx","presentation/startRun/StartRun.tsx","presentation/absolvedRuns/AbsolvedRuns.tsx","presentation/navigation/Navigation.tsx","presentation/header/Header.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Path","RunnerContext","createContext","runnerPosition","undefined","runnerSpeed","runner","runnerName","runnerRunIds","runs","setRunner","setRuns","addRun","run","setRunnerPosition","position","RunnerContextProvider","children","useState","setRunnerSpeed","geoLocationOptions","enableHighAccuracy","geoLocationErrorCallback","err","console","warn","code","message","geoLocationSuccessCallback","geoPosition","LatLng","coords","latitude","longitude","speed","toFixed","useEffect","navigator","geolocation","watchPosition","Provider","value","oldState","createRunnerService","runnerRepository","runRepository","getRuns","getTracks","runIds","Promise","all","map","runId","a","getRun","push","getRunner","runners","createRunnerRepository","index","resolve","find","createRunRepository","storageRuns","localStorage","getItem","JSON","parse","saveRuns","setItem","stringify","Login","props","setRunnerName","runnerService","useContext","type","onChange","e","target","placeholder","onClick","log","then","RenderRuns","mapService","track2Polygon","trackPoints","trackPoint","calcArea","polygonPoints","points","poly","polygon","area","Polyline","positions","track","RenderPosition","useMap","setView","Marker","ShowRunControl","setShowRuns","className","MapMask","runnersRunController","showRuns","getRunsOfRunner","runsReceived","MapContainer","center","zoom","scrollWheelZoom","style","width","height","borderRadius","TileLayer","attribution","url","Map","useCallback","useRunnerRunsController","CurrentRunContext","CurrentRunContextProvider","startTime","setStartTime","setTrackPoints","setRun","isRunning","setIsRunning","startRun","Date","now","stopRun","endTime","addTrackPoint","resetRun","CurrentRunControls","savePositionAsTrack","lat","lng","time","ButtonGroup","size","Button","disabled","variant","InfoCard","property","minWidth","backgroundColor","padding","margin","fontFamily","fontSize","fontWeight","textTransform","color","Dashboard","runTime","setRunTime","runInterval","setRunInterval","id","setInterval","clearInterval","display","flexDirection","flexWrap","toISOString","substr","StartRun","AbsolvedRuns","Navigation","to","NEW","RUNS","Header","lineHeight","textAlign","App","justifyContent","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c6ae2d58.chunk.js","sourcesContent":["/*\n * Copyright (C) 2021 CEWE Stiftung & Co. KGaA / Oldenburg / Germany\n *\n * This document contains trade secret data which is the property of CEWE Stiftung & Co. KGaA. Information\n * contained herein may not be used, copied or disclosed in whole or part except as permitted by written\n * agreement from CEWE Stiftung & Co. KGaA.\n */\n\nexport enum Path {\n  ROOT = \"/\",\n  NEW = \"new\",\n  RUNS = \"runs\",\n}\n","import { createContext, ReactNode, useEffect, useState } from \"react\";\nimport { Runner } from \"../domain/runner/Runner\";\nimport { Run } from \"../domain/run/Run\";\nimport { LatLng } from \"leaflet\";\n\ninterface RunnerProps {\n  runnerPosition: LatLng | undefined;\n  runnerSpeed: string | null;\n  runner: Runner;\n  setRunner: (runner: Runner) => void;\n  runs: Run[];\n  setRuns: (runs: Run[]) => void;\n  addRun: (run: Run) => void;\n  setRunnerPosition: (position: LatLng) => void;\n}\nexport const RunnerContext = createContext<RunnerProps>({\n  runnerPosition: undefined,\n  runnerSpeed: null,\n  runner: { runnerName: \"\", runnerRunIds: [] },\n  runs: [],\n  setRunner(runner: Runner): void {},\n  setRuns(runs: Run[]): void {},\n  addRun(run: Run): void {},\n  setRunnerPosition(position: LatLng): void {},\n});\n\ninterface ProviderProps {\n  children: ReactNode;\n}\n\nexport const RunnerContextProvider = ({ children }: ProviderProps) => {\n  const [runs, setRuns] = useState<Run[]>([]);\n  const [runnerPosition, setRunnerPosition] = useState<LatLng>();\n  const [runnerSpeed, setRunnerSpeed] = useState<string | null>(null);\n\n  const [runner, setRunner] = useState<Runner>({\n    runnerName: \"\",\n    runnerRunIds: [],\n  });\n  const geoLocationOptions = { enableHighAccuracy: true };\n\n  const addRun = (run: Run) => {\n    setRuns((oldState: Run[]) => [...oldState, run]);\n  };\n\n  const startTracking = () => {\n    navigator.geolocation.watchPosition(\n      geoLocationSuccessCallback,\n      geoLocationErrorCallback,\n      geoLocationOptions\n    );\n  };\n\n  const geoLocationErrorCallback = (err: any) => {\n    console.warn(`ERROR(${err.code}): ${err.message}`);\n  };\n\n  const geoLocationSuccessCallback = (geoPosition: GeolocationPosition) => {\n    setRunnerPosition(\n      new LatLng(geoPosition.coords.latitude, geoPosition.coords.longitude)\n    );\n    geoPosition.coords.speed &&\n      setRunnerSpeed((geoPosition.coords.speed * 3.6).toFixed(1));\n  };\n\n  useEffect(() => {\n    startTracking();\n  }, []);\n\n  return (\n    <RunnerContext.Provider\n      value={{\n        runner,\n        setRunner,\n        runs,\n        setRuns,\n        runnerPosition,\n        setRunnerPosition,\n        addRun,\n        runnerSpeed,\n      }}\n    >\n      {children}\n    </RunnerContext.Provider>\n  );\n};\n","import { RunnerRepository } from \"./RunnerRepository\";\nimport { RunRepository } from \"../run/RunRepository\";\nimport { Run } from \"../run/Run\";\nimport { Runner } from \"./Runner\";\n\nexport interface RunnerService {\n  getRuns: (runnerName: string) => Promise<Run[]>;\n  getRunner: (runnerName: string) => Promise<Runner | undefined>;\n}\n\nexport const createRunnerService = (\n  runnerRepository: RunnerRepository,\n  runRepository: RunRepository\n): RunnerService => {\n  return {\n    async getRuns(runnerName: string): Promise<Run[]> {\n      const runs: Run[] = [];\n      const runIds = await runnerRepository.getTracks(runnerName);\n      await Promise.all(\n        runIds.map(async (runId) => {\n          const run = await runRepository.getRun(runId);\n          run && runs.push(run);\n        })\n      );\n      return runs;\n    },\n    async getRunner(runnerName: string): Promise<Runner | undefined> {\n      let runner = await runnerRepository.getRunner(runnerName);\n      return runner;\n    },\n  };\n};\n","import { Runner } from \"../domain/runner/Runner\";\n\nexport const runners: Runner[] = [\n  { runnerName: \"Tim\", runnerRunIds: [] },\n  { runnerName: \"Leonie\", runnerRunIds: [3] },\n];\n","import { runners } from \"../../resources/Runners\";\nimport { Runner } from \"./Runner\";\n\nexport interface RunnerRepository {\n  getTracks: (runnerName: string) => Promise<number[]>;\n  getRunner: (runnerName: string) => Promise<Runner | undefined>;\n}\n\nexport const createRunnerRepository = (): RunnerRepository => {\n  return {\n    getTracks(runnerName: string): Promise<number[]> {\n      let runIds: number[] = [];\n      for (let index in runners) {\n        if (runners[index].runnerName === runnerName) {\n          runIds = runners[index].runnerRunIds;\n        }\n      }\n      return Promise.resolve(runIds);\n    },\n    getRunner(runnerName: string): Promise<Runner | undefined> {\n      return Promise.resolve(\n        runners.find((runner: Runner) => runner.runnerName === runnerName)\n      );\n    },\n  };\n};\n","import { Run } from \"./Run\";\n\nexport interface RunRepository {\n  getRun: (runId: number) => Promise<Run | undefined>;\n  saveRuns: (runs: Run[]) => void;\n}\n\nexport const createRunRepository = (): RunRepository => {\n  const storageRuns = localStorage.getItem(\"runs\");\n  const runs: Run[] = storageRuns ? JSON.parse(storageRuns) : undefined;\n\n  const getRun = (runId: number): Promise<Run | undefined> => {\n    let run: Run | undefined = undefined;\n    for (let index in runs) {\n      if (runs[index].runId === runId) {\n        run = runs[index];\n      }\n    }\n    return Promise.resolve(run);\n  };\n\n  const saveRuns = (runs: Run[]): void => {\n    localStorage.setItem(\"runs\", JSON.stringify(runs));\n  };\n\n  return { getRun, saveRuns };\n};\n","import * as React from \"react\";\nimport { useContext, useState } from \"react\";\nimport { RunnerContext } from \"../../context/RunnerContext\";\nimport { createRunnerService } from \"../../domain/runner/RunnerService\";\nimport { createRunnerRepository } from \"../../domain/runner/RunnerRepository\";\nimport { createRunRepository } from \"../../domain/run/RunRepository\";\n\ntype Props = {};\nexport const Login = (props: Props) => {\n  const [runnerName, setRunnerName] = useState<string>(\"\");\n  const runnerRepository = createRunnerRepository();\n  const runRepository = createRunRepository();\n  const runnerService = createRunnerService(runnerRepository, runRepository);\n  const { setRunner } = useContext(RunnerContext);\n\n  const clickHandle = () => {\n    console.log(\"Login \" + runnerName);\n    runnerService.getRunner(runnerName).then((runner: any) => {\n      if (runner) {\n        setRunner(runner!);\n      }\n    });\n  };\n\n  return (\n    <div>\n      <input\n        type={\"text\"}\n        onChange={(e) => {\n          setRunnerName(e.target.value);\n        }}\n        value={runnerName}\n        placeholder={\"Enter your Name:\"}\n      />\n      <button onClick={clickHandle}>Login</button>\n    </div>\n  );\n};\n","import { Polyline } from \"react-leaflet\";\nimport { FunctionComponent } from \"react\";\nimport { Run } from \"../../../domain/run/Run\";\nimport { createMapService } from \"../../../domain/map/MapService\";\n\ninterface Props {\n  runs: Run[];\n}\n\nexport const RenderRuns: FunctionComponent<Props> = ({ runs }: Props) => {\n  const mapService = createMapService();\n\n  return (\n    <>\n      {runs.map((run, index) => {\n        return (\n          <Polyline\n            positions={mapService.track2Polygon(run.track.trackPoints)}\n          />\n        );\n      })}\n    </>\n  );\n};\n","import {TrackPoint} from \"../run/TrackPoint\";\nimport {LatLngTuple} from \"leaflet\";\nimport {area, polygon} from \"@turf/turf\";\n\nexport interface MapService {\n  track2Polygon: (trackPoints: TrackPoint[]) => LatLngTuple[];\n  calcArea: (polygonPoints: TrackPoint[]) => number;\n}\n\nexport const createMapService = (): MapService => {\n  return {\n    track2Polygon(trackPoints: TrackPoint[]): LatLngTuple[] {\n      return trackPoints.map((trackPoint) => {\n        return [trackPoint.latitude, trackPoint.longitude];\n      });\n    },\n    calcArea(polygonPoints: TrackPoint[]): number {\n      let points: any = polygonPoints.map((trackPoint) => {\n        return [trackPoint.latitude, trackPoint.longitude];\n      });\n      let poly = polygon([points]);\n      return area(poly) / 1000000; // from m^2 to km^2\n    },\n  };\n};\n","import { FunctionComponent, useContext, useEffect } from \"react\";\nimport { Marker, useMap } from \"react-leaflet\";\nimport { RunnerContext } from \"../../../context/RunnerContext\";\n\ninterface Props {}\n\nexport const RenderPosition: FunctionComponent<Props> = () => {\n  const { runnerPosition } = useContext(RunnerContext);\n  const map = useMap();\n\n  useEffect(() => {\n    runnerPosition && map.setView(runnerPosition);\n  }, [runnerPosition]);\n\n  return <>{runnerPosition && <Marker position={runnerPosition} />}</>;\n};\n","import { FunctionComponent } from \"react\";\n\ninterface Props {\n  setShowRuns: any;\n}\n\nconst ShowRunControl: FunctionComponent<Props> = ({ setShowRuns }: Props) => {\n  return (\n    <div className=\"leaflet-top leaflet-right\">\n      <div className=\"leaflet-control\">\n        <button onClick={() => setShowRuns((oldState: any) => !oldState)}>\n          Show Runs\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ShowRunControl;\n","import { FunctionComponent, useContext, useEffect, useState } from \"react\";\nimport { MapContainer, TileLayer } from \"react-leaflet\";\nimport { RunnerRunsController } from \"../../../controller/runnerRuns/useRunnerRunsController\";\nimport { RunnerContext } from \"../../../context/RunnerContext\";\nimport { RenderRuns } from \"./RenderRuns\";\nimport { RenderPosition } from \"./RenderPosition\";\nimport ShowRunControl from \"./ShowRunControl\";\n\ninterface Props {\n  runnersRunController: RunnerRunsController;\n}\nexport const MapMask: FunctionComponent<Props> = ({\n  runnersRunController,\n}: Props) => {\n  const { runner, runs, setRuns } = useContext(RunnerContext);\n  const [showRuns, setShowRuns] = useState(false);\n\n  useEffect(() => {\n    runnersRunController\n      .getRunsOfRunner(runner.runnerName)\n      .then((runsReceived) => {\n        setRuns(runsReceived);\n      });\n  }, [runner]);\n\n  return (\n    <>\n      <MapContainer\n        className=\"basicMap\"\n        center={[0, 0]}\n        zoom={20}\n        scrollWheelZoom={false}\n        style={{\n          width: \"100%\",\n          height: \"400px\",\n          borderRadius: \"8px\",\n        }}\n      >\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png\"\n        />\n        {showRuns && <RenderRuns runs={runs} />}\n        <RenderPosition />\n        <ShowRunControl setShowRuns={setShowRuns} />\n      </MapContainer>\n    </>\n  );\n};\n","import { FunctionComponent } from \"react\";\n\nimport { createRunnerService } from \"../../../domain/runner/RunnerService\";\nimport { MapMask } from \"../component/MapMask\";\nimport { useRunnerRunsController } from \"../../../controller/runnerRuns/useRunnerRunsController\";\nimport { createRunnerRepository } from \"../../../domain/runner/RunnerRepository\";\nimport { createRunRepository } from \"../../../domain/run/RunRepository\";\n\ntype Props = {};\n\nexport const Map: FunctionComponent<Props> = (props: Props) => {\n  const runnerRepository = createRunnerRepository();\n  const runRepository = createRunRepository();\n  const runnerService = createRunnerService(runnerRepository, runRepository);\n\n  const runnersRunController = useRunnerRunsController(runnerService);\n  return <MapMask runnersRunController={runnersRunController}></MapMask>;\n};\n","import { RunnerService } from \"../../domain/runner/RunnerService\";\nimport { Run } from \"../../domain/run/Run\";\nimport { useCallback } from \"react\";\n\nexport interface RunnerRunsController {\n  getRunsOfRunner: (runnerName: string) => Promise<Run[]>;\n}\n\nexport const useRunnerRunsController = (\n  runnerService: RunnerService\n): RunnerRunsController => {\n  const getRunsOfRunner = useCallback(\n    (runnerName: string): Promise<Run[]> => {\n      return runnerService.getRuns(runnerName);\n    },\n    [runnerService]\n  );\n\n  return { getRunsOfRunner };\n};\n","import { createContext, ReactNode, useState } from \"react\";\nimport { Run } from \"../domain/run/Run\";\nimport { TrackPoint } from \"../domain/run/TrackPoint\";\n\ninterface CurrentRunProps {\n  startTime: number | undefined;\n  run: Run | undefined;\n  startRun: () => void;\n  stopRun: () => void;\n  addTrackPoint: (trackPoint: TrackPoint) => void;\n  resetRun: () => void;\n  isRunning: boolean;\n  setIsRunning: (isRunning: boolean) => void;\n}\nexport const CurrentRunContext = createContext<CurrentRunProps>(\n  {} as CurrentRunProps\n);\n\ninterface ProviderProps {\n  children: ReactNode;\n}\n\nexport const CurrentRunContextProvider = ({ children }: ProviderProps) => {\n  const [startTime, setStartTime] = useState<number>();\n  const [trackPoints, setTrackPoints] = useState<TrackPoint[]>([]);\n  const [run, setRun] = useState<Run>();\n  const [isRunning, setIsRunning] = useState(false);\n\n  const resetRun = () => {\n    setRun(undefined);\n    setStartTime(undefined);\n    setTrackPoints([]);\n  };\n  const addTrackPoint = (trackPoint: TrackPoint) => {\n    console.log(\"Add TrackPoint: \", trackPoint);\n    setTrackPoints((oldState) => [...oldState, trackPoint]);\n  };\n\n  const startRun = () => {\n    console.log(\"Start Run\");\n    setStartTime(Date.now());\n    setIsRunning(true);\n  };\n\n  const stopRun = () => {\n    console.log(\"Stop Run\");\n    const track = { trackPoints };\n    setRun({\n      track: track,\n      startTime: startTime ? startTime : Date.now(),\n      endTime: Date.now(),\n    });\n    setIsRunning(false);\n  };\n\n  return (\n    <CurrentRunContext.Provider\n      value={{\n        startTime,\n        isRunning,\n        setIsRunning,\n        run,\n        startRun,\n        stopRun,\n        addTrackPoint,\n        resetRun,\n      }}\n    >\n      {children}\n    </CurrentRunContext.Provider>\n  );\n};\n","import { FunctionComponent, useContext, useEffect, useState } from \"react\";\nimport { CurrentRunContext } from \"../../context/CurrentRunContext\";\nimport { RunnerContext } from \"../../context/RunnerContext\";\nimport { createRunRepository } from \"../../domain/run/RunRepository\";\nimport { Button, ButtonGroup } from \"react-bootstrap\";\n\ninterface Props {}\n\nexport const CurrentRunControls: FunctionComponent<Props> = () => {\n  const { runnerPosition } = useContext(RunnerContext);\n  const { addTrackPoint, startRun, stopRun, run, resetRun, isRunning } =\n    useContext(CurrentRunContext);\n  const { addRun, runs } = useContext(RunnerContext);\n  const runRepository = createRunRepository();\n\n  useEffect(() => {\n    isRunning && savePositionAsTrack();\n  }, [runnerPosition]);\n\n  const savePositionAsTrack = () => {\n    runnerPosition &&\n      addTrackPoint({\n        latitude: runnerPosition.lat,\n        longitude: runnerPosition.lng,\n        time: Date.now(),\n      });\n  };\n\n  const handleStart = () => {\n    startRun();\n  };\n\n  const handleStop = () => {\n    stopRun();\n  };\n\n  const handleSave = () => {\n    console.log(\"Save run\");\n    runRepository.saveRuns([...runs, run!]);\n    addRun(run!);\n  };\n\n  const handleReset = () => {\n    console.log(\"Reset run\");\n    resetRun();\n  };\n\n  return (\n    <ButtonGroup size=\"lg\">\n      <Button onClick={handleStart} disabled={isRunning} variant=\"dark\">\n        Start\n      </Button>\n      <Button onClick={handleStop} disabled={!isRunning} variant=\"dark\">\n        Stop\n      </Button>\n      <Button onClick={handleSave} disabled={isRunning} variant=\"dark\">\n        Save\n      </Button>\n      <Button onClick={handleReset} disabled={isRunning} variant=\"dark\">\n        Reset\n      </Button>\n    </ButtonGroup>\n  );\n};\n","import * as React from \"react\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { RunnerContext } from \"../../context/RunnerContext\";\nimport { CurrentRunContext } from \"../../context/CurrentRunContext\";\n\ntype Props = {\n  property: string;\n  value: string | number;\n};\nexport const InfoCard = ({ property, value }: Props) => {\n  return (\n    <div\n      style={{\n        width: \"20%\",\n        minWidth: \"120px\",\n        backgroundColor: \"#555\",\n        borderRadius: \"10px\",\n        padding: \"10px\",\n        margin: \"10px 5px 10px 5px\",\n      }}\n    >\n      <div\n        style={{\n          fontFamily: \"Open Sans Condensed, sans-serif\",\n          fontSize: \"28px\",\n          fontWeight: \"bold\",\n          textTransform: \"uppercase\",\n          color: \"#eee\",\n        }}\n      >\n        {property}\n      </div>\n      <div\n        style={{\n          fontFamily: \"Open Sans Condensed, sans-serif\",\n          fontSize: \"24px\",\n          fontWeight: \"bold\",\n          textTransform: \"uppercase\",\n          color: \"#eee\",\n        }}\n      >\n        {value}\n      </div>\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { RunnerContext } from \"../../context/RunnerContext\";\nimport { CurrentRunContext } from \"../../context/CurrentRunContext\";\nimport { InfoCard } from \"./InfoCard\";\n\ntype Props = {};\nexport const Dashboard = (props: Props) => {\n  const { runnerSpeed } = useContext(RunnerContext);\n  const { startTime, isRunning } = useContext(CurrentRunContext);\n  const [runTime, setRunTime] = useState(0);\n  const [runInterval, setRunInterval] = useState<any>();\n\n  const updateRunTime = () => {\n    console.log(\"RunTime: \", runTime);\n    console.log(\"StartTime: \", startTime);\n    console.log(\"Now: \", Date.now());\n    startTime && setRunTime(Date.now() - startTime);\n  };\n\n  useEffect(() => {\n    if (isRunning) {\n      const id = setInterval(() => {\n        updateRunTime();\n      }, 1000);\n      setRunInterval(id);\n    } else {\n      runInterval && clearInterval(runInterval);\n    }\n  }, [isRunning]);\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"row\",\n        width: \"100%\",\n        height: \"50%\",\n        padding: \"5px\",\n        flexWrap: \"wrap\",\n      }}\n    >\n      <InfoCard\n        property={\"Speed\"}\n        value={runnerSpeed ? runnerSpeed + \" [km/h]\" : \"--\"}\n      />\n      <InfoCard\n        property={\"Time\"}\n        value={new Date(runTime).toISOString().substr(11, 8)}\n      />\n    </div>\n  );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { Map } from \"../map/wiredComponent/Map\";\nimport { CurrentRunControls } from \"../controls/CurrentRunControls\";\nimport { Dashboard } from \"../dashboard/Dashboard\";\n\ninterface Props {}\n\nexport const StartRun: FunctionComponent<Props> = () => {\n  return (\n    <>\n      <Map />\n      <CurrentRunControls />\n      <Dashboard />\n    </>\n  );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Map } from \"../map/wiredComponent/Map\";\nimport { CurrentRunControls } from \"../controls/CurrentRunControls\";\nimport { Dashboard } from \"../dashboard/Dashboard\";\n\ninterface Props {}\n\nexport const AbsolvedRuns: FunctionComponent<Props> = () => {\n  return <>Working on it</>;\n};\n","import { FunctionComponent } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Path } from \"../shared/Path\";\n\ninterface Props {}\n\nexport const Navigation: FunctionComponent<Props> = () => {\n  return (\n    <>\n      <Link to={Path.NEW}>New </Link>\n      <Link to={Path.RUNS}>Runs </Link>\n    </>\n  );\n};\n","import * as React from \"react\";\nimport { useContext } from \"react\";\nimport { RunnerContext } from \"../../context/RunnerContext\";\nimport { CurrentRunControls } from \"../controls/CurrentRunControls\";\nimport { Navigation } from \"../navigation/Navigation\";\n\ntype Props = {};\nexport const Header = (props: Props) => {\n  const { runner } = useContext(RunnerContext);\n  return (\n    <>\n      <h2\n        style={{\n          color: \"#eee\",\n          fontFamily: \"Open Sans Condensed, sans-serif\",\n          fontSize: \"48px\",\n          fontWeight: \"bold\",\n          lineHeight: \"48px\",\n          padding: \"0 5px\",\n          textAlign: \"center\",\n          textTransform: \"uppercase\",\n          minWidth: \"200px\",\n        }}\n      >\n        Moin {runner.runnerName}\n      </h2>\n      <Navigation />\n    </>\n  );\n};\n","import React, { useContext } from \"react\";\nimport \"./App.css\";\nimport { RunnerContext } from \"./context/RunnerContext\";\nimport { Login } from \"./presentation/login/Login\";\nimport { StartRun } from \"./presentation/startRun/StartRun\";\nimport { AbsolvedRuns } from \"./presentation/absolvedRuns/AbsolvedRuns\";\nimport { Path } from \"./presentation/shared/Path\";\nimport { Route, Routes } from \"react-router-dom\";\nimport { Header } from \"./presentation/header/Header\";\n\nfunction App() {\n  const { runner } = useContext(RunnerContext);\n  return (\n    <>\n      {runner?.runnerName === \"\" ? (\n        <Login />\n      ) : (\n        <div style={{ width: \"80%\", height: \"100%\", margin: \"auto\" }}>\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              justifyContent: \"space-between\",\n              padding: \" 1% 0 1% 0\",\n              flexWrap: \"wrap\",\n              margin: \"20px 0 20px 0\",\n            }}\n          >\n            {<Header />}\n          </div>\n\n          <Routes>\n            <Route path={Path.NEW} element={<StartRun />} />\n            <Route path={Path.RUNS} element={<AbsolvedRuns />} />\n          </Routes>\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { RunnerContextProvider } from \"./context/RunnerContext\";\nimport { CurrentRunContextProvider } from \"./context/CurrentRunContext\";\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RunnerContextProvider>\n      <CurrentRunContextProvider>\n        <HashRouter>\n          <App />\n        </HashRouter>\n      </CurrentRunContextProvider>\n    </RunnerContextProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}