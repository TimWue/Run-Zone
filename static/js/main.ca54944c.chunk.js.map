{"version":3,"sources":["domain/runner/RunnerService.ts","context/RunnerContext.tsx","presentation/map/component/RenderRuns.tsx","domain/map/MapService.ts","presentation/map/component/RenderPosition.tsx","presentation/map/component/ShowRunControl.tsx","presentation/map/component/MapMask.tsx","resources/Runners.ts","domain/runner/RunnerRepository.ts","domain/run/RunRepository.ts","presentation/map/wiredComponent/Map.tsx","controller/runnerRuns/useRunnerRunsController.ts","context/CurrentRunContext.tsx","presentation/dashboard/InfoCard.tsx","presentation/dashboard/Dashboard.tsx","presentation/login/Login.tsx","presentation/controls/CurrentRunControls.tsx","presentation/header/Header.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["createRunnerService","runnerRepository","runRepository","getRuns","runnerName","runs","getTracks","runIds","Promise","all","map","runId","a","getRun","run","push","getRunner","runner","RunnerContext","createContext","runnerPosition","undefined","runnerSpeed","runnerRunIds","setRunner","setRuns","addRun","setRunnerPosition","position","RunnerContextProvider","children","useState","setRunnerSpeed","geoLocationOptions","enableHighAccuracy","geoLocationErrorCallback","err","console","warn","code","message","geoLocationSuccessCallback","geoPosition","LatLng","coords","latitude","longitude","speed","toFixed","useEffect","navigator","geolocation","watchPosition","Provider","value","oldState","RenderRuns","mapService","track2Polygon","trackPoints","trackPoint","calcArea","polygonPoints","points","poly","polygon","area","index","Polyline","positions","track","RenderPosition","useContext","useMap","setView","Marker","ShowRunControl","setShowRuns","className","onClick","MapMask","runnersRunController","showRuns","getRunsOfRunner","then","runsReceived","MapContainer","center","zoom","scrollWheelZoom","style","width","height","borderRadius","TileLayer","attribution","url","runners","createRunnerRepository","resolve","find","createRunRepository","storageRuns","localStorage","getItem","JSON","parse","saveRuns","setItem","stringify","Map","props","runnerService","useCallback","useRunnerRunsController","CurrentRunContext","CurrentRunContextProvider","startTime","setStartTime","setTrackPoints","setRun","isRunning","setIsRunning","startRun","log","Date","now","stopRun","endTime","addTrackPoint","resetRun","InfoCard","property","minWidth","backgroundColor","padding","margin","fontFamily","fontSize","fontWeight","textTransform","color","Dashboard","runTime","setRunTime","runInterval","setRunInterval","id","setInterval","clearInterval","display","flexDirection","flexWrap","toISOString","substr","Login","setRunnerName","type","onChange","e","target","placeholder","CurrentRunControls","savePositionAsTrack","lat","lng","time","ButtonGroup","size","Button","disabled","variant","Header","lineHeight","textAlign","App","justifyContent","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca54944c.chunk.js","sourcesContent":["import { RunnerRepository } from \"./RunnerRepository\";\nimport { RunRepository } from \"../run/RunRepository\";\nimport { Run } from \"../run/Run\";\nimport { Runner } from \"./Runner\";\n\nexport interface RunnerService {\n  getRuns: (runnerName: string) => Promise<Run[]>;\n  getRunner: (runnerName: string) => Promise<Runner | undefined>;\n}\n\nexport const createRunnerService = (\n  runnerRepository: RunnerRepository,\n  runRepository: RunRepository\n): RunnerService => {\n  return {\n    async getRuns(runnerName: string): Promise<Run[]> {\n      const runs: Run[] = [];\n      const runIds = await runnerRepository.getTracks(runnerName);\n      await Promise.all(\n        runIds.map(async (runId) => {\n          const run = await runRepository.getRun(runId);\n          run && runs.push(run);\n        })\n      );\n      return runs;\n    },\n    async getRunner(runnerName: string): Promise<Runner | undefined> {\n      let runner = await runnerRepository.getRunner(runnerName);\n      return runner;\n    },\n  };\n};\n","import { createContext, ReactNode, useEffect, useState } from \"react\";\nimport { Runner } from \"../domain/runner/Runner\";\nimport { Run } from \"../domain/run/Run\";\nimport { LatLng } from \"leaflet\";\n\ninterface RunnerProps {\n  runnerPosition: LatLng | undefined;\n  runnerSpeed: string | null;\n  runner: Runner;\n  setRunner: (runner: Runner) => void;\n  runs: Run[];\n  setRuns: (runs: Run[]) => void;\n  addRun: (run: Run) => void;\n  setRunnerPosition: (position: LatLng) => void;\n}\nexport const RunnerContext = createContext<RunnerProps>({\n  runnerPosition: undefined,\n  runnerSpeed: null,\n  runner: { runnerName: \"\", runnerRunIds: [] },\n  runs: [],\n  setRunner(runner: Runner): void {},\n  setRuns(runs: Run[]): void {},\n  addRun(run: Run): void {},\n  setRunnerPosition(position: LatLng): void {},\n});\n\ninterface ProviderProps {\n  children: ReactNode;\n}\n\nexport const RunnerContextProvider = ({ children }: ProviderProps) => {\n  const [runs, setRuns] = useState<Run[]>([]);\n  const [runnerPosition, setRunnerPosition] = useState<LatLng>();\n  const [runnerSpeed, setRunnerSpeed] = useState<string | null>(null);\n\n  const [runner, setRunner] = useState<Runner>({\n    runnerName: \"\",\n    runnerRunIds: [],\n  });\n  const geoLocationOptions = { enableHighAccuracy: true };\n\n  const addRun = (run: Run) => {\n    setRuns((oldState: Run[]) => [...oldState, run]);\n  };\n\n  const startTracking = () => {\n    navigator.geolocation.watchPosition(\n      geoLocationSuccessCallback,\n      geoLocationErrorCallback,\n      geoLocationOptions\n    );\n  };\n\n  const geoLocationErrorCallback = (err: any) => {\n    console.warn(`ERROR(${err.code}): ${err.message}`);\n  };\n\n  const geoLocationSuccessCallback = (geoPosition: GeolocationPosition) => {\n    setRunnerPosition(\n      new LatLng(geoPosition.coords.latitude, geoPosition.coords.longitude)\n    );\n    geoPosition.coords.speed &&\n      setRunnerSpeed((geoPosition.coords.speed * 3.6).toFixed(1));\n  };\n\n  useEffect(() => {\n    startTracking();\n  }, []);\n\n  return (\n    <RunnerContext.Provider\n      value={{\n        runner,\n        setRunner,\n        runs,\n        setRuns,\n        runnerPosition,\n        setRunnerPosition,\n        addRun,\n        runnerSpeed,\n      }}\n    >\n      {children}\n    </RunnerContext.Provider>\n  );\n};\n","import { Polyline } from \"react-leaflet\";\nimport { FunctionComponent } from \"react\";\nimport { Run } from \"../../../domain/run/Run\";\nimport { createMapService } from \"../../../domain/map/MapService\";\n\ninterface Props {\n  runs: Run[];\n}\n\nexport const RenderRuns: FunctionComponent<Props> = ({ runs }: Props) => {\n  const mapService = createMapService();\n\n  return (\n    <>\n      {runs.map((run, index) => {\n        return (\n          <Polyline\n            positions={mapService.track2Polygon(run.track.trackPoints)}\n          />\n        );\n      })}\n    </>\n  );\n};\n","import {TrackPoint} from \"../run/TrackPoint\";\nimport {LatLngTuple} from \"leaflet\";\nimport {area, polygon} from \"@turf/turf\";\n\nexport interface MapService {\n  track2Polygon: (trackPoints: TrackPoint[]) => LatLngTuple[];\n  calcArea: (polygonPoints: TrackPoint[]) => number;\n}\n\nexport const createMapService = (): MapService => {\n  return {\n    track2Polygon(trackPoints: TrackPoint[]): LatLngTuple[] {\n      return trackPoints.map((trackPoint) => {\n        return [trackPoint.latitude, trackPoint.longitude];\n      });\n    },\n    calcArea(polygonPoints: TrackPoint[]): number {\n      let points: any = polygonPoints.map((trackPoint) => {\n        return [trackPoint.latitude, trackPoint.longitude];\n      });\n      let poly = polygon([points]);\n      return area(poly) / 1000000; // from m^2 to km^2\n    },\n  };\n};\n","import { FunctionComponent, useContext, useEffect } from \"react\";\nimport { Marker, useMap } from \"react-leaflet\";\nimport { RunnerContext } from \"../../../context/RunnerContext\";\n\ninterface Props {}\n\nexport const RenderPosition: FunctionComponent<Props> = () => {\n  const { runnerPosition } = useContext(RunnerContext);\n  const map = useMap();\n\n  useEffect(() => {\n    runnerPosition && map.setView(runnerPosition);\n  }, [runnerPosition]);\n\n  return <>{runnerPosition && <Marker position={runnerPosition} />}</>;\n};\n","import { FunctionComponent } from \"react\";\n\ninterface Props {\n  setShowRuns: any;\n}\n\nconst ShowRunControl: FunctionComponent<Props> = ({ setShowRuns }: Props) => {\n  return (\n    <div className=\"leaflet-top leaflet-right\">\n      <div className=\"leaflet-control\">\n        <button onClick={() => setShowRuns((oldState: any) => !oldState)}>\n          Show Runs\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ShowRunControl;\n","import { FunctionComponent, useContext, useEffect, useState } from \"react\";\nimport { MapContainer, TileLayer } from \"react-leaflet\";\nimport { RunnerRunsController } from \"../../../controller/runnerRuns/useRunnerRunsController\";\nimport { RunnerContext } from \"../../../context/RunnerContext\";\nimport { RenderRuns } from \"./RenderRuns\";\nimport { RenderPosition } from \"./RenderPosition\";\nimport ShowRunControl from \"./ShowRunControl\";\n\ninterface Props {\n  runnersRunController: RunnerRunsController;\n}\nexport const MapMask: FunctionComponent<Props> = ({\n  runnersRunController,\n}: Props) => {\n  const { runner, runs, setRuns } = useContext(RunnerContext);\n  const [showRuns, setShowRuns] = useState(false);\n\n  useEffect(() => {\n    runnersRunController\n      .getRunsOfRunner(runner.runnerName)\n      .then((runsReceived) => {\n        setRuns(runsReceived);\n      });\n  }, [runner]);\n\n  return (\n    <>\n      <MapContainer\n        className=\"basicMap\"\n        center={[0, 0]}\n        zoom={20}\n        scrollWheelZoom={false}\n        style={{\n          width: \"100%\",\n          height: \"400px\",\n          borderRadius: \"8px\",\n        }}\n      >\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png\"\n        />\n        {showRuns && <RenderRuns runs={runs} />}\n        <RenderPosition />\n        <ShowRunControl setShowRuns={setShowRuns} />\n      </MapContainer>\n    </>\n  );\n};\n","import { Runner } from \"../domain/runner/Runner\";\n\nexport const runners: Runner[] = [\n  { runnerName: \"Tim\", runnerRunIds: [] },\n  { runnerName: \"Leonie\", runnerRunIds: [3] },\n];\n","import { runners } from \"../../resources/Runners\";\nimport { Runner } from \"./Runner\";\n\nexport interface RunnerRepository {\n  getTracks: (runnerName: string) => Promise<number[]>;\n  getRunner: (runnerName: string) => Promise<Runner | undefined>;\n}\n\nexport const createRunnerRepository = (): RunnerRepository => {\n  return {\n    getTracks(runnerName: string): Promise<number[]> {\n      let runIds: number[] = [];\n      for (let index in runners) {\n        if (runners[index].runnerName === runnerName) {\n          runIds = runners[index].runnerRunIds;\n        }\n      }\n      return Promise.resolve(runIds);\n    },\n    getRunner(runnerName: string): Promise<Runner | undefined> {\n      return Promise.resolve(\n        runners.find((runner: Runner) => runner.runnerName === runnerName)\n      );\n    },\n  };\n};\n","import { Run } from \"./Run\";\n\nexport interface RunRepository {\n  getRun: (runId: number) => Promise<Run | undefined>;\n  saveRuns: (runs: Run[]) => void;\n}\n\nexport const createRunRepository = (): RunRepository => {\n  const storageRuns = localStorage.getItem(\"runs\");\n  const runs: Run[] = storageRuns ? JSON.parse(storageRuns) : undefined;\n\n  const getRun = (runId: number): Promise<Run | undefined> => {\n    let run: Run | undefined = undefined;\n    for (let index in runs) {\n      if (runs[index].runId === runId) {\n        run = runs[index];\n      }\n    }\n    return Promise.resolve(run);\n  };\n\n  const saveRuns = (runs: Run[]): void => {\n    localStorage.setItem(\"runs\", JSON.stringify(runs));\n  };\n\n  return { getRun, saveRuns };\n};\n","import { FunctionComponent } from \"react\";\n\nimport { createRunnerService } from \"../../../domain/runner/RunnerService\";\nimport { MapMask } from \"../component/MapMask\";\nimport { useRunnerRunsController } from \"../../../controller/runnerRuns/useRunnerRunsController\";\nimport { createRunnerRepository } from \"../../../domain/runner/RunnerRepository\";\nimport { createRunRepository } from \"../../../domain/run/RunRepository\";\n\ntype Props = {};\n\nexport const Map: FunctionComponent<Props> = (props: Props) => {\n  const runnerRepository = createRunnerRepository();\n  const runRepository = createRunRepository();\n  const runnerService = createRunnerService(runnerRepository, runRepository);\n\n  const runnersRunController = useRunnerRunsController(runnerService);\n  return <MapMask runnersRunController={runnersRunController}></MapMask>;\n};\n","import { RunnerService } from \"../../domain/runner/RunnerService\";\nimport { Run } from \"../../domain/run/Run\";\nimport { useCallback } from \"react\";\n\nexport interface RunnerRunsController {\n  getRunsOfRunner: (runnerName: string) => Promise<Run[]>;\n}\n\nexport const useRunnerRunsController = (\n  runnerService: RunnerService\n): RunnerRunsController => {\n  const getRunsOfRunner = useCallback(\n    (runnerName: string): Promise<Run[]> => {\n      return runnerService.getRuns(runnerName);\n    },\n    [runnerService]\n  );\n\n  return { getRunsOfRunner };\n};\n","import { createContext, ReactNode, useState } from \"react\";\nimport { Run } from \"../domain/run/Run\";\nimport { TrackPoint } from \"../domain/run/TrackPoint\";\n\ninterface CurrentRunProps {\n  startTime: number | undefined;\n  run: Run | undefined;\n  startRun: () => void;\n  stopRun: () => void;\n  addTrackPoint: (trackPoint: TrackPoint) => void;\n  resetRun: () => void;\n  isRunning: boolean;\n  setIsRunning: (isRunning: boolean) => void;\n}\nexport const CurrentRunContext = createContext<CurrentRunProps>(\n  {} as CurrentRunProps\n);\n\ninterface ProviderProps {\n  children: ReactNode;\n}\n\nexport const CurrentRunContextProvider = ({ children }: ProviderProps) => {\n  const [startTime, setStartTime] = useState<number>();\n  const [trackPoints, setTrackPoints] = useState<TrackPoint[]>([]);\n  const [run, setRun] = useState<Run>();\n  const [isRunning, setIsRunning] = useState(false);\n\n  const resetRun = () => {\n    setRun(undefined);\n    setStartTime(undefined);\n    setTrackPoints([]);\n  };\n  const addTrackPoint = (trackPoint: TrackPoint) => {\n    console.log(\"Add TrackPoint: \", trackPoint);\n    setTrackPoints((oldState) => [...oldState, trackPoint]);\n  };\n\n  const startRun = () => {\n    console.log(\"Start Run\");\n    setStartTime(Date.now());\n    setIsRunning(true);\n  };\n\n  const stopRun = () => {\n    console.log(\"Stop Run\");\n    const track = { trackPoints };\n    setRun({\n      track: track,\n      startTime: startTime ? startTime : Date.now(),\n      endTime: Date.now(),\n    });\n    setIsRunning(false);\n  };\n\n  return (\n    <CurrentRunContext.Provider\n      value={{\n        startTime,\n        isRunning,\n        setIsRunning,\n        run,\n        startRun,\n        stopRun,\n        addTrackPoint,\n        resetRun,\n      }}\n    >\n      {children}\n    </CurrentRunContext.Provider>\n  );\n};\n","import * as React from \"react\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { RunnerContext } from \"../../context/RunnerContext\";\nimport { CurrentRunContext } from \"../../context/CurrentRunContext\";\n\ntype Props = {\n  property: string;\n  value: string | number;\n};\nexport const InfoCard = ({ property, value }: Props) => {\n  return (\n    <div\n      style={{\n        width: \"20%\",\n        minWidth: \"200px\",\n        backgroundColor: \"#555\",\n        borderRadius: \"10px\",\n        padding: \"10px\",\n        margin: \"10px\",\n      }}\n    >\n      <div\n        style={{\n          fontFamily: \"Open Sans Condensed, sans-serif\",\n          fontSize: \"36px\",\n          fontWeight: \"bold\",\n          textTransform: \"uppercase\",\n          color: \"#eee\",\n        }}\n      >\n        {property}\n      </div>\n      <div\n        style={{\n          fontFamily: \"Open Sans Condensed, sans-serif\",\n          fontSize: \"24px\",\n          fontWeight: \"bold\",\n          textTransform: \"uppercase\",\n          color: \"#eee\",\n        }}\n      >\n        {value}\n      </div>\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { RunnerContext } from \"../../context/RunnerContext\";\nimport { CurrentRunContext } from \"../../context/CurrentRunContext\";\nimport { InfoCard } from \"./InfoCard\";\n\ntype Props = {};\nexport const Dashboard = (props: Props) => {\n  const { runnerSpeed } = useContext(RunnerContext);\n  const { startTime, isRunning } = useContext(CurrentRunContext);\n  const [runTime, setRunTime] = useState(0);\n  const [runInterval, setRunInterval] = useState<any>();\n\n  const updateRunTime = () => {\n    console.log(\"RunTime: \", runTime);\n    console.log(\"StartTime: \", startTime);\n    console.log(\"Now: \", Date.now());\n    startTime && setRunTime(Date.now() - startTime);\n  };\n\n  useEffect(() => {\n    if (isRunning) {\n      const id = setInterval(() => {\n        updateRunTime();\n      }, 1000);\n      setRunInterval(id);\n    } else {\n      runInterval && clearInterval(runInterval);\n    }\n  }, [isRunning]);\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"row\",\n        width: \"100%\",\n        height: \"50%\",\n        padding: \"20px\",\n        flexWrap: \"wrap\",\n      }}\n    >\n      <InfoCard\n        property={\"Speed\"}\n        value={runnerSpeed ? runnerSpeed + \" [km/h]\" : \"--\"}\n      />\n      <InfoCard\n        property={\"Time\"}\n        value={new Date(runTime).toISOString().substr(11, 8)}\n      />\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport { useContext, useState } from \"react\";\nimport { RunnerContext } from \"../../context/RunnerContext\";\nimport { createRunnerService } from \"../../domain/runner/RunnerService\";\nimport { createRunnerRepository } from \"../../domain/runner/RunnerRepository\";\nimport { createRunRepository } from \"../../domain/run/RunRepository\";\n\ntype Props = {};\nexport const Login = (props: Props) => {\n  const [runnerName, setRunnerName] = useState<string>(\"\");\n  const runnerRepository = createRunnerRepository();\n  const runRepository = createRunRepository();\n  const runnerService = createRunnerService(runnerRepository, runRepository);\n  const { setRunner } = useContext(RunnerContext);\n\n  const clickHandle = () => {\n    console.log(\"Login \" + runnerName);\n    runnerService.getRunner(runnerName).then((runner: any) => {\n      if (runner) {\n        setRunner(runner!);\n      }\n    });\n  };\n\n  return (\n    <div>\n      <input\n        type={\"text\"}\n        onChange={(e) => {\n          setRunnerName(e.target.value);\n        }}\n        value={runnerName}\n        placeholder={\"Enter your Name:\"}\n      />\n      <button onClick={clickHandle}>Login</button>\n    </div>\n  );\n};\n","import { FunctionComponent, useContext, useEffect, useState } from \"react\";\nimport { CurrentRunContext } from \"../../context/CurrentRunContext\";\nimport { RunnerContext } from \"../../context/RunnerContext\";\nimport { createRunRepository } from \"../../domain/run/RunRepository\";\nimport { Button, ButtonGroup } from \"react-bootstrap\";\n\ninterface Props {}\n\nexport const CurrentRunControls: FunctionComponent<Props> = () => {\n  const { runnerPosition } = useContext(RunnerContext);\n  const { addTrackPoint, startRun, stopRun, run, resetRun, isRunning } =\n    useContext(CurrentRunContext);\n  const { addRun, runs } = useContext(RunnerContext);\n  const runRepository = createRunRepository();\n\n  useEffect(() => {\n    isRunning && savePositionAsTrack();\n  }, [runnerPosition]);\n\n  const savePositionAsTrack = () => {\n    runnerPosition &&\n      addTrackPoint({\n        latitude: runnerPosition.lat,\n        longitude: runnerPosition.lng,\n        time: Date.now(),\n      });\n  };\n\n  const handleStart = () => {\n    startRun();\n  };\n\n  const handleStop = () => {\n    stopRun();\n  };\n\n  const handleSave = () => {\n    console.log(\"Save run\");\n    runRepository.saveRuns([...runs, run!]);\n    addRun(run!);\n  };\n\n  const handleReset = () => {\n    console.log(\"Reset run\");\n    resetRun();\n  };\n\n  return (\n    <ButtonGroup size=\"lg\">\n      <Button onClick={handleStart} disabled={isRunning} variant=\"dark\">\n        Start\n      </Button>\n      <Button onClick={handleStop} disabled={!isRunning} variant=\"dark\">\n        Stop\n      </Button>\n      <Button onClick={handleSave} disabled={isRunning} variant=\"dark\">\n        Save\n      </Button>\n      <Button onClick={handleReset} disabled={isRunning} variant=\"dark\">\n        Reset\n      </Button>\n    </ButtonGroup>\n  );\n};\n","import * as React from \"react\";\nimport { useContext } from \"react\";\nimport { RunnerContext } from \"../../context/RunnerContext\";\nimport { CurrentRunControls } from \"../controls/CurrentRunControls\";\n\ntype Props = {};\nexport const Header = (props: Props) => {\n  const { runner } = useContext(RunnerContext);\n  return (\n    <>\n      <h2\n        style={{\n          color: \"#eee\",\n          fontFamily: \"Open Sans Condensed, sans-serif\",\n          fontSize: \"48px\",\n          fontWeight: \"bold\",\n          lineHeight: \"48px\",\n          padding: \"0 5px\",\n          textAlign: \"center\",\n          textTransform: \"uppercase\",\n          minWidth: \"200px\",\n        }}\n      >\n        Moin {runner.runnerName}\n      </h2>\n      <CurrentRunControls />\n    </>\n  );\n};\n","import React, { useContext } from \"react\";\nimport \"./App.css\";\nimport { Map } from \"./presentation/map/wiredComponent/Map\";\nimport { Dashboard } from \"./presentation/dashboard/Dashboard\";\nimport { RunnerContext } from \"./context/RunnerContext\";\nimport { Login } from \"./presentation/login/Login\";\nimport { Header } from \"./presentation/header/Header\";\nimport { Container, Row } from \"react-bootstrap\";\n\nfunction App() {\n  const { runner } = useContext(RunnerContext);\n  return (\n    <>\n      {runner?.runnerName === \"\" ? (\n        <Login />\n      ) : (\n        <div style={{ width: \"80%\", height: \"100%\", margin: \"auto\" }}>\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              justifyContent: \"space-between\",\n              padding: \" 1% 0 1% 0\",\n              flexWrap: \"wrap\",\n              margin: \"20px 0 20px 0\",\n            }}\n          >\n            <Header />\n          </div>\n          <Map />\n          <Dashboard />\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { RunnerContextProvider } from \"./context/RunnerContext\";\nimport { CurrentRunContextProvider } from \"./context/CurrentRunContext\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RunnerContextProvider>\n      <CurrentRunContextProvider>\n        <App />\n      </CurrentRunContextProvider>\n    </RunnerContextProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}