{"version":3,"sources":["domain/runner/RunnerService.ts","context/RunnerContext.tsx","presentation/map/component/RenderRuns.tsx","domain/map/MapService.ts","presentation/map/component/RenderPosition.tsx","presentation/map/component/MapMask.tsx","resources/Runners.ts","domain/runner/RunnerRepository.ts","domain/run/RunRepository.ts","presentation/map/wiredComponent/Map.tsx","controller/runnerRuns/useRunnerRunsController.ts","context/CurrentRunContext.tsx","presentation/dashboard/Dashboard.tsx","presentation/login/Login.tsx","presentation/header/Header.tsx","presentation/controls/CurrentRunControls.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["createRunnerService","runnerRepository","runRepository","getRuns","runnerName","runs","getTracks","runIds","Promise","all","map","runId","a","getRun","run","push","getRunner","runner","RunnerContext","createContext","runnerPosition","undefined","runnerRunIds","setRunner","setRuns","addRun","setRunnerPosition","position","RunnerContextProvider","children","useState","Provider","value","oldState","RenderRuns","mapService","track2Polygon","trackPoints","trackPoint","latitude","longitude","calcArea","polygonPoints","points","poly","polygon","area","index","Polyline","positions","track","RenderPosition","useContext","useMap","useEffect","navigator","geolocation","getCurrentPosition","geoPosition","LatLng","coords","setView","Marker","MapMask","runnersRunController","showRuns","setShowRuns","getRunsOfRunner","then","runsReceived","style","width","height","MapContainer","className","center","zoom","scrollWheelZoom","borderRadius","TileLayer","attribution","url","onClick","runners","createRunnerRepository","resolve","find","createRunRepository","storageRuns","localStorage","getItem","JSON","parse","saveRuns","setItem","stringify","Map","props","runnerService","useCallback","useRunnerRunsController","CurrentRunContext","CurrentRunContextProvider","startTime","setStartTime","setTrackPoints","setRun","speed","setSpeed","startRun","console","log","Date","now","stopRun","endTime","addTrackPoint","resetRun","Dashboard","Login","setRunnerName","type","onChange","e","target","placeholder","Header","CurrentRunControls","isRunning","setIsRunning","watchId","setWatchId","geoLocationOptions","enableHighAccuracy","geoLocationErrorCallback","err","warn","code","message","geoLocationSuccessCallback","time","id","watchPosition","disabled","clearWatch","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d008dfde.chunk.js","sourcesContent":["import { RunnerRepository } from \"./RunnerRepository\";\nimport { RunRepository } from \"../run/RunRepository\";\nimport { Run } from \"../run/Run\";\nimport { Runner } from \"./Runner\";\n\nexport interface RunnerService {\n  getRuns: (runnerName: string) => Promise<Run[]>;\n  getRunner: (runnerName: string) => Promise<Runner | undefined>;\n}\n\nexport const createRunnerService = (\n  runnerRepository: RunnerRepository,\n  runRepository: RunRepository\n): RunnerService => {\n  return {\n    async getRuns(runnerName: string): Promise<Run[]> {\n      const runs: Run[] = [];\n      const runIds = await runnerRepository.getTracks(runnerName);\n      await Promise.all(\n        runIds.map(async (runId) => {\n          const run = await runRepository.getRun(runId);\n          run && runs.push(run);\n        })\n      );\n      return runs;\n    },\n    async getRunner(runnerName: string): Promise<Runner | undefined> {\n      let runner = await runnerRepository.getRunner(runnerName);\n      return runner;\n    },\n  };\n};\n","import { createContext, ReactNode, useState } from \"react\";\nimport { Runner } from \"../domain/runner/Runner\";\nimport { Run } from \"../domain/run/Run\";\nimport { LatLng } from \"leaflet\";\n\ninterface RunnerProps {\n  runnerPosition: LatLng | undefined;\n  runner: Runner;\n  setRunner: (runner: Runner) => void;\n  runs: Run[];\n  setRuns: (runs: Run[]) => void;\n  addRun: (run: Run) => void;\n  setRunnerPosition: (position: LatLng) => void;\n}\nexport const RunnerContext = createContext<RunnerProps>({\n  runnerPosition: undefined,\n  runner: { runnerName: \"\", runnerRunIds: [] },\n  runs: [],\n  setRunner(runner: Runner): void {},\n  setRuns(runs: Run[]): void {},\n  addRun(run: Run): void {},\n  setRunnerPosition(position: LatLng): void {},\n});\n\ninterface ProviderProps {\n  children: ReactNode;\n}\n\nexport const RunnerContextProvider = ({ children }: ProviderProps) => {\n  const [runnerPosition, setRunnerPosition] = useState<LatLng>();\n\n  const [runner, setRunner] = useState<Runner>({\n    runnerName: \"\",\n    runnerRunIds: [],\n  });\n  const [runs, setRuns] = useState<Run[]>([]);\n\n  const addRun = (run: Run) => {\n    setRuns((oldState: Run[]) => [...oldState, run]);\n  };\n\n  return (\n    <RunnerContext.Provider\n      value={{\n        runner,\n        setRunner,\n        runs,\n        setRuns,\n        runnerPosition,\n        setRunnerPosition,\n        addRun,\n      }}\n    >\n      {children}\n    </RunnerContext.Provider>\n  );\n};\n","import { Polyline } from \"react-leaflet\";\nimport { FunctionComponent } from \"react\";\nimport { Run } from \"../../../domain/run/Run\";\nimport { createMapService } from \"../../../domain/map/MapService\";\n\ninterface Props {\n  runs: Run[];\n}\n\nexport const RenderRuns: FunctionComponent<Props> = ({ runs }: Props) => {\n  const mapService = createMapService();\n\n  return (\n    <>\n      {runs.map((run, index) => {\n        return (\n          <Polyline\n            positions={mapService.track2Polygon(run.track.trackPoints)}\n          />\n        );\n      })}\n    </>\n  );\n};\n","import {TrackPoint} from \"../run/TrackPoint\";\nimport {LatLngTuple} from \"leaflet\";\nimport {area, polygon} from \"@turf/turf\";\n\nexport interface MapService {\n  track2Polygon: (trackPoints: TrackPoint[]) => LatLngTuple[];\n  calcArea: (polygonPoints: TrackPoint[]) => number;\n}\n\nexport const createMapService = (): MapService => {\n  return {\n    track2Polygon(trackPoints: TrackPoint[]): LatLngTuple[] {\n      return trackPoints.map((trackPoint) => {\n        return [trackPoint.latitude, trackPoint.longitude];\n      });\n    },\n    calcArea(polygonPoints: TrackPoint[]): number {\n      let points: any = polygonPoints.map((trackPoint) => {\n        return [trackPoint.latitude, trackPoint.longitude];\n      });\n      let poly = polygon([points]);\n      return area(poly) / 1000000; // from m^2 to km^2\n    },\n  };\n};\n","import { FunctionComponent, useContext, useEffect, useState } from \"react\";\nimport { Marker, useMap } from \"react-leaflet\";\nimport { LatLng } from \"leaflet\";\nimport { RunnerContext } from \"../../../context/RunnerContext\";\n\ninterface Props {}\n\nexport const RenderPosition: FunctionComponent<Props> = () => {\n  const { runnerPosition, setRunnerPosition } = useContext(RunnerContext);\n  const map = useMap();\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(function (geoPosition) {\n      setRunnerPosition(\n        new LatLng(geoPosition.coords.latitude, geoPosition.coords.longitude)\n      );\n    });\n  }, []);\n\n  useEffect(() => {\n    runnerPosition && map.setView(runnerPosition);\n  }, [runnerPosition]);\n\n  return <>{runnerPosition && <Marker position={runnerPosition} />}</>;\n};\n","import { FunctionComponent, useContext, useEffect, useState } from \"react\";\nimport { MapContainer, TileLayer } from \"react-leaflet\";\nimport { RunnerRunsController } from \"../../../controller/runnerRuns/useRunnerRunsController\";\nimport { RunnerContext } from \"../../../context/RunnerContext\";\nimport { RenderRuns } from \"./RenderRuns\";\nimport { RenderPosition } from \"./RenderPosition\";\n\ninterface Props {\n  runnersRunController: RunnerRunsController;\n}\nexport const MapMask: FunctionComponent<Props> = ({\n  runnersRunController,\n}: Props) => {\n  const { runner, runs, setRuns } = useContext(RunnerContext);\n  const [showRuns, setShowRuns] = useState(false);\n\n  useEffect(() => {\n    runnersRunController\n      .getRunsOfRunner(runner.runnerName)\n      .then((runsReceived) => {\n        setRuns(runsReceived);\n      });\n  }, [runner]);\n\n  return (\n    <div style={{ width: \"100%\", height: \"50%\" }}>\n      <MapContainer\n        className=\"basicMap\"\n        center={[0, 0]}\n        zoom={20}\n        scrollWheelZoom={false}\n        style={{\n          width: \"100%\",\n          height: \"600px\",\n          borderRadius: \"8px\",\n        }}\n      >\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png\"\n        />\n        {showRuns && <RenderRuns runs={runs} />}\n        <RenderPosition />\n      </MapContainer>\n      <button onClick={() => setShowRuns(!showRuns)}>Show Runs</button>\n    </div>\n  );\n};\n","import { Runner } from \"../domain/runner/Runner\";\n\nexport const runners: Runner[] = [\n  { runnerName: \"Tim\", runnerRunIds: [] },\n  { runnerName: \"Leonie\", runnerRunIds: [3] },\n];\n","import { runners } from \"../../resources/Runners\";\nimport { Runner } from \"./Runner\";\n\nexport interface RunnerRepository {\n  getTracks: (runnerName: string) => Promise<number[]>;\n  getRunner: (runnerName: string) => Promise<Runner | undefined>;\n}\n\nexport const createRunnerRepository = (): RunnerRepository => {\n  return {\n    getTracks(runnerName: string): Promise<number[]> {\n      let runIds: number[] = [];\n      for (let index in runners) {\n        if (runners[index].runnerName === runnerName) {\n          runIds = runners[index].runnerRunIds;\n        }\n      }\n      return Promise.resolve(runIds);\n    },\n    getRunner(runnerName: string): Promise<Runner | undefined> {\n      return Promise.resolve(\n        runners.find((runner: Runner) => runner.runnerName === runnerName)\n      );\n    },\n  };\n};\n","import { Run } from \"./Run\";\n\nexport interface RunRepository {\n  getRun: (runId: number) => Promise<Run | undefined>;\n  saveRuns: (runs: Run[]) => void;\n}\n\nexport const createRunRepository = (): RunRepository => {\n  const storageRuns = localStorage.getItem(\"runs\");\n  const runs: Run[] = storageRuns ? JSON.parse(storageRuns) : undefined;\n\n  const getRun = (runId: number): Promise<Run | undefined> => {\n    let run: Run | undefined = undefined;\n    for (let index in runs) {\n      if (runs[index].runId === runId) {\n        run = runs[index];\n      }\n    }\n    return Promise.resolve(run);\n  };\n\n  const saveRuns = (runs: Run[]): void => {\n    localStorage.setItem(\"runs\", JSON.stringify(runs));\n  };\n\n  return { getRun, saveRuns };\n};\n","import { FunctionComponent } from \"react\";\n\nimport { createRunnerService } from \"../../../domain/runner/RunnerService\";\nimport { MapMask } from \"../component/MapMask\";\nimport { useRunnerRunsController } from \"../../../controller/runnerRuns/useRunnerRunsController\";\nimport { createRunnerRepository } from \"../../../domain/runner/RunnerRepository\";\nimport { createRunRepository } from \"../../../domain/run/RunRepository\";\n\ntype Props = {};\n\nexport const Map: FunctionComponent<Props> = (props: Props) => {\n  const runnerRepository = createRunnerRepository();\n  const runRepository = createRunRepository();\n  const runnerService = createRunnerService(runnerRepository, runRepository);\n\n  const runnersRunController = useRunnerRunsController(runnerService);\n  return <MapMask runnersRunController={runnersRunController}></MapMask>;\n};\n","import { RunnerService } from \"../../domain/runner/RunnerService\";\nimport { Run } from \"../../domain/run/Run\";\nimport { useCallback } from \"react\";\n\nexport interface RunnerRunsController {\n  getRunsOfRunner: (runnerName: string) => Promise<Run[]>;\n}\n\nexport const useRunnerRunsController = (\n  runnerService: RunnerService\n): RunnerRunsController => {\n  const getRunsOfRunner = useCallback(\n    (runnerName: string): Promise<Run[]> => {\n      return runnerService.getRuns(runnerName);\n    },\n    [runnerService]\n  );\n\n  return { getRunsOfRunner };\n};\n","import { createContext, ReactNode, useState } from \"react\";\nimport { Run } from \"../domain/run/Run\";\nimport { TrackPoint } from \"../domain/run/TrackPoint\";\n\ninterface CurrentRunProps {\n  speed: number | null;\n  run: Run | undefined;\n  startRun: () => void;\n  stopRun: () => void;\n  setSpeed: (speed: number | null) => void;\n  addTrackPoint: (trackPoint: TrackPoint) => void;\n  resetRun: () => void;\n}\nexport const CurrentRunContext = createContext<CurrentRunProps>(\n  {} as CurrentRunProps\n);\n\ninterface ProviderProps {\n  children: ReactNode;\n}\n\nexport const CurrentRunContextProvider = ({ children }: ProviderProps) => {\n  const [startTime, setStartTime] = useState<number>();\n  const [trackPoints, setTrackPoints] = useState<TrackPoint[]>([]);\n  const [run, setRun] = useState<Run>();\n  const [speed, setSpeed] = useState<number | null>(null);\n\n  const resetRun = () => {\n    setRun(undefined);\n    setStartTime(undefined);\n    setSpeed(null);\n    setTrackPoints([]);\n  };\n  const addTrackPoint = (trackPoint: TrackPoint) => {\n    console.log(\"Add TrackPoint: \", trackPoint);\n    setTrackPoints((oldState) => [...oldState, trackPoint]);\n  };\n\n  const startRun = () => {\n    console.log(\"Start Run\");\n    setStartTime(Date.now());\n  };\n\n  const stopRun = () => {\n    console.log(\"Stop Run\");\n    const track = { trackPoints };\n    setRun({\n      track: track,\n      startTime: startTime ? startTime : Date.now(),\n      endTime: Date.now(),\n    });\n  };\n\n  return (\n    <CurrentRunContext.Provider\n      value={{\n        speed,\n        setSpeed,\n        run,\n        startRun,\n        stopRun,\n        addTrackPoint,\n        resetRun,\n      }}\n    >\n      {children}\n    </CurrentRunContext.Provider>\n  );\n};\n","import * as React from \"react\";\nimport { useContext } from \"react\";\nimport { CurrentRunContext } from \"../../context/CurrentRunContext\";\n\ntype Props = {};\nexport const Dashboard = (props: Props) => {\n  const { speed } = useContext(CurrentRunContext);\n\n  return <>{speed && <div>Speed: {speed}</div>}</>;\n};\n","import * as React from \"react\";\nimport { useContext, useState } from \"react\";\nimport { RunnerContext } from \"../../context/RunnerContext\";\nimport { createRunnerService } from \"../../domain/runner/RunnerService\";\nimport { createRunnerRepository } from \"../../domain/runner/RunnerRepository\";\nimport { createRunRepository } from \"../../domain/run/RunRepository\";\n\ntype Props = {};\nexport const Login = (props: Props) => {\n  const [runnerName, setRunnerName] = useState<string>(\"\");\n  const runnerRepository = createRunnerRepository();\n  const runRepository = createRunRepository();\n  const runnerService = createRunnerService(runnerRepository, runRepository);\n  const { setRunner } = useContext(RunnerContext);\n\n  const clickHandle = () => {\n    console.log(\"Login \" + runnerName);\n    runnerService.getRunner(runnerName).then((runner: any) => {\n      if (runner) {\n        setRunner(runner!);\n      }\n    });\n  };\n\n  return (\n    <div>\n      <input\n        type={\"text\"}\n        onChange={(e) => {\n          setRunnerName(e.target.value);\n        }}\n        value={runnerName}\n        placeholder={\"Enter your Name:\"}\n      />\n      <button onClick={clickHandle}>Login</button>\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport { useContext } from \"react\";\nimport { RunnerContext } from \"../../context/RunnerContext\";\n\ntype Props = {};\nexport const Header = (props: Props) => {\n  const { runner } = useContext(RunnerContext);\n  return <div>Hello {runner.runnerName}</div>;\n};\n","import { FunctionComponent, useContext, useState } from \"react\";\nimport { CurrentRunContext } from \"../../context/CurrentRunContext\";\nimport { RunnerContext } from \"../../context/RunnerContext\";\nimport { createRunRepository } from \"../../domain/run/RunRepository\";\n\ninterface Props {}\n\nexport const CurrentRunControls: FunctionComponent<Props> = () => {\n  const { addTrackPoint, startRun, stopRun, run, setSpeed, resetRun } =\n    useContext(CurrentRunContext);\n  const { addRun, runs } = useContext(RunnerContext);\n  const [isRunning, setIsRunning] = useState(false);\n  const [watchId, setWatchId] = useState<number>();\n  const runRepository = createRunRepository();\n  const geoLocationOptions = { enableHighAccuracy: true };\n\n  const handleStart = () => {\n    startRun();\n    const id = navigator.geolocation.watchPosition(\n      geoLocationSuccessCallback,\n      geoLocationErrorCallback,\n      geoLocationOptions\n    );\n    setWatchId(id);\n    setIsRunning(true);\n  };\n\n  const handleStop = () => {\n    stopRun();\n    watchId && navigator.geolocation.clearWatch(watchId);\n    setIsRunning(false);\n  };\n\n  const handleSave = () => {\n    console.log(\"Save run\");\n    runRepository.saveRuns([...runs, run!]);\n    addRun(run!);\n  };\n\n  const handleReset = () => {\n    console.log(\"Reset run\");\n    resetRun();\n  };\n\n  const geoLocationErrorCallback = (err: any) => {\n    console.warn(`ERROR(${err.code}): ${err.message}`);\n  };\n\n  const geoLocationSuccessCallback = (geoPosition: GeolocationPosition) => {\n    console.log(\"Speed: \", geoPosition.coords.speed);\n    setSpeed(geoPosition.coords.speed);\n    addTrackPoint({\n      latitude: geoPosition.coords.latitude,\n      longitude: geoPosition.coords.longitude,\n      time: Date.now(),\n    });\n  };\n\n  return (\n    <>\n      <button onClick={handleStart} disabled={isRunning}>\n        Start\n      </button>\n      <button onClick={handleStop} disabled={!isRunning}>\n        Stop\n      </button>\n      <button onClick={handleSave} disabled={isRunning}>\n        Save\n      </button>\n      <button onClick={handleReset} disabled={isRunning}>\n        Reset\n      </button>\n    </>\n  );\n};\n","import React, { useContext } from \"react\";\nimport \"./App.css\";\nimport { Map } from \"./presentation/map/wiredComponent/Map\";\nimport { Dashboard } from \"./presentation/dashboard/Dashboard\";\nimport { RunnerContext } from \"./context/RunnerContext\";\nimport { Login } from \"./presentation/login/Login\";\nimport { Header } from \"./presentation/header/Header\";\nimport { CurrentRunControls } from \"./presentation/controls/CurrentRunControls\";\n\nfunction App() {\n  const { runner } = useContext(RunnerContext);\n  return (\n    <>\n      {runner?.runnerName === \"\" ? (\n        <Login />\n      ) : (\n        <>\n          <Header />\n          <Map />\n          <Dashboard />\n          <CurrentRunControls />\n        </>\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { RunnerContextProvider } from \"./context/RunnerContext\";\nimport { CurrentRunContextProvider } from \"./context/CurrentRunContext\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RunnerContextProvider>\n      <CurrentRunContextProvider>\n        <App />\n      </CurrentRunContextProvider>\n    </RunnerContextProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}