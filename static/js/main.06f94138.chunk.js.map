{"version":3,"sources":["presentation/shared/LocalStorageKeys.tsx","context/RunnerContext.tsx","domain/runner/RunnerRepository.ts","presentation/shared/Styles.ts","presentation/login/Login.tsx","presentation/shared/Path.tsx","domain/map/MapService.ts","presentation/map/component/RenderRuns.tsx","presentation/map/component/RenderPosition.tsx","presentation/map/component/ShowRunControl.tsx","presentation/map/component/MapMask.tsx","presentation/map/wiredComponent/Map.tsx","context/CurrentRunContext.tsx","domain/run/RunRepository.ts","presentation/controls/CurrentRunControls.tsx","presentation/dashboard/InfoCard.tsx","presentation/dashboard/Dashboard.tsx","presentation/startRun/StartRun.tsx","presentation/absolvedRuns/ViewChanger.tsx","presentation/absolvedRuns/AbsolvedRuns.tsx","presentation/navigation/NavLink.tsx","controller/runs/useRunsController.ts","presentation/navigation/Navigation.tsx","presentation/header/Header.tsx","presentation/home/Home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LocalStorageKeys","RunnerContext","createContext","runnerPosition","undefined","runnerSpeed","runner","runs","setRunner","setRuns","addRun","run","setRunnerPosition","position","RunnerContextProvider","children","useState","setRunnerSpeed","geoLocationOptions","enableHighAccuracy","geoLocationErrorCallback","err","console","warn","code","message","geoLocationSuccessCallback","geoPosition","LatLng","coords","latitude","longitude","speed","toFixed","useEffect","navigator","geolocation","watchPosition","Provider","value","oldState","Styles","createRunnerRepository","getRunner","localStorage","getItem","RUNNER","JSON","parse","setItem","stringify","removeRunner","removeItem","Path","Login","props","runnerName","setRunnerName","runnerRepository","useContext","LoginContainer","LoginHeader","LoginName","type","onChange","e","target","placeholder","LoginButton","onClick","log","newRunner","runnerRunIds","styled","h3","FONT_FAMILY_MAIN","div","input","button","createMapService","track2Polygon","trackPoints","map","trackPoint","calcArea","polygonPoints","points","poly","polygon","area","RenderRuns","mapService","index","Polyline","positions","track","RenderPosition","useMap","setView","Marker","ShowRunControl","setShowRuns","className","MapMask","showRuns","RunMap","center","zoom","scrollWheelZoom","TileLayer","attribution","url","MapContainer","Map","CurrentRunContext","CurrentRunContextProvider","startTime","setStartTime","setTrackPoints","setRun","isRunning","setIsRunning","startRun","Date","now","stopRun","endTime","addTrackPoint","resetRun","createRunRepository","storageRuns","RUNS","saveRuns","getAllRuns","CurrentRunControls","runRepository","savePositionAsTrack","lat","lng","time","ButtonGroup","size","Button","disabled","variant","InfoCard","property","Container","Property","Value","Content","Dashboard","runTime","setRunTime","runInterval","setRunInterval","id","setInterval","clearInterval","toISOString","substr","StartRun","ViewChanger","AbsolvedRuns","currentRun","setCurrentRun","setIndex","centerFromRun","startPoint","length","setCenter","clickHandle","change","oldIndex","newIndex","RunDateTime","toUTCString","PastRunMap","RunSelectButton","NavLink","to","CustomLink","Link","useRunsController","initRuns","initRunner","Navigation","controller","NEW","Logout","BACKGROUND_COLOR_MAIN","Header","Logo","h2","Home","Welcome","OuterContainer","HeaderContainer","App","runsController","path","ROOT","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.06f94138.chunk.js","sourcesContent":["export enum LocalStorageKeys {\n  RUNNER = \"runner\",\n  RUNS = \"runs\",\n}\n","import { createContext, ReactNode, useEffect, useState } from \"react\";\nimport { Runner } from \"../domain/runner/Runner\";\nimport { Run } from \"../domain/run/Run\";\nimport { LatLng } from \"leaflet\";\n\ninterface RunnerProps {\n  runnerPosition: LatLng | undefined;\n  runnerSpeed: string | null;\n  runner: Runner | undefined;\n  setRunner: (runner: Runner | undefined) => void;\n  runs: Run[];\n  setRuns: (runs: Run[]) => void;\n  addRun: (run: Run) => void;\n  setRunnerPosition: (position: LatLng) => void;\n}\nexport const RunnerContext = createContext<RunnerProps>({\n  runnerPosition: undefined,\n  runnerSpeed: null,\n  runner: undefined,\n  runs: [],\n  setRunner(runner: Runner | undefined): void {},\n  setRuns(runs: Run[]): void {},\n  addRun(run: Run): void {},\n  setRunnerPosition(position: LatLng): void {},\n});\n\ninterface ProviderProps {\n  children: ReactNode;\n}\n\nexport const RunnerContextProvider = ({ children }: ProviderProps) => {\n  const [runs, setRuns] = useState<Run[]>([]);\n  const [runnerPosition, setRunnerPosition] = useState<LatLng>();\n  const [runnerSpeed, setRunnerSpeed] = useState<string | null>(null);\n  const [runner, setRunner] = useState<Runner | undefined>();\n  const geoLocationOptions = { enableHighAccuracy: true };\n\n  const addRun = (run: Run) => {\n    setRuns((oldState: Run[]) => [...oldState, run]);\n  };\n\n  const startTracking = () => {\n    navigator.geolocation.watchPosition(\n      geoLocationSuccessCallback,\n      geoLocationErrorCallback,\n      geoLocationOptions\n    );\n  };\n\n  const geoLocationErrorCallback = (err: any) => {\n    console.warn(`ERROR(${err.code}): ${err.message}`);\n  };\n\n  const geoLocationSuccessCallback = (geoPosition: GeolocationPosition) => {\n    setRunnerPosition(\n      new LatLng(geoPosition.coords.latitude, geoPosition.coords.longitude)\n    );\n    geoPosition.coords.speed &&\n      setRunnerSpeed((geoPosition.coords.speed * 3.6).toFixed(1));\n  };\n\n  useEffect(() => {\n    startTracking();\n  }, []);\n\n  return (\n    <RunnerContext.Provider\n      value={{\n        runner,\n        setRunner,\n        runs,\n        setRuns,\n        runnerPosition,\n        setRunnerPosition,\n        addRun,\n        runnerSpeed,\n      }}\n    >\n      {children}\n    </RunnerContext.Provider>\n  );\n};\n","import { Runner } from \"./Runner\";\nimport { LocalStorageKeys } from \"../../presentation/shared/LocalStorageKeys\";\n\nexport interface RunnerRepository {\n  getRunner: () => Runner | undefined;\n  setRunner: (runner: Runner) => void;\n  removeRunner: () => void;\n}\n\nexport const createRunnerRepository = (): RunnerRepository => {\n  const getRunner = () => {\n    const runner = localStorage.getItem(LocalStorageKeys.RUNNER);\n    return runner ? (JSON.parse(runner) as Runner) : undefined;\n  };\n\n  const setRunner = (runner: Runner) => {\n    localStorage.setItem(LocalStorageKeys.RUNNER, JSON.stringify(runner));\n  };\n\n  const removeRunner = () => {\n    localStorage.removeItem(LocalStorageKeys.RUNNER);\n  };\n\n  return {\n    getRunner,\n    setRunner,\n    removeRunner,\n  };\n};\n","export enum Styles {\n  FONT_FAMILY_MAIN = \"Open Sans Condensed, sans-serif\",\n  BACKGROUND_COLOR_MAIN = \"#343a40\",\n}\n","import * as React from \"react\";\nimport { useContext, useState } from \"react\";\nimport { RunnerContext } from \"../../context/RunnerContext\";\nimport { createRunnerRepository } from \"../../domain/runner/RunnerRepository\";\nimport styled from \"styled-components\";\nimport { Styles } from \"../shared/Styles\";\n\ntype Props = {};\nexport const Login = (props: Props) => {\n  const [runnerName, setRunnerName] = useState<string>(\"\");\n  const runnerRepository = createRunnerRepository();\n  const { setRunner } = useContext(RunnerContext);\n\n  const clickHandle = () => {\n    console.log(\"Login \" + runnerName);\n    const newRunner = { runnerName: runnerName, runnerRunIds: [] };\n    runnerRepository.setRunner(newRunner);\n    setRunner(newRunner);\n  };\n\n  return (\n    <LoginContainer>\n      <LoginHeader>Willkommen!</LoginHeader>\n      <LoginName\n        type={\"text\"}\n        onChange={(e) => {\n          setRunnerName(e.target.value);\n        }}\n        value={runnerName}\n        placeholder={\"Wie heißt du?\"}\n      />\n      <LoginButton onClick={clickHandle}>Login</LoginButton>\n    </LoginContainer>\n  );\n};\n\nconst LoginHeader = styled.h3`\n  font-family: ${Styles.FONT_FAMILY_MAIN};\n  font-size: 24px;\n  text-transform: uppercase;\n  color: #343a40;\n  font-weight: bold;\n  margin: 0 0 30% 0;\n`;\n\nconst LoginContainer = styled.div`\n  width: 20%;\n  min-width: 300px;\n  height: 80%;\n  min-height: 500px;\n  background-color: aliceblue;\n  border-radius: 10px;\n  box-shadow: 10px 10px #282c34;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin: 10% auto auto auto;\n`;\n\nconst LoginName = styled.input`\n  width: 70%;\n  height: 40px;\n  border: none;\n  border-radius: 10px;\n  margin: 5px;\n  text-align: center;\n`;\n\nconst LoginButton = styled.button`\n  width: 70%;\n  height: 50px;\n  background-color: #343a40;\n  color: white;\n  border-radius: 10px;\n  margin: 5px;\n`;\n","export enum Path {\n  ROOT = \"/\",\n  NEW = \"new\",\n  RUNS = \"runs\",\n}\n","import {TrackPoint} from \"../run/TrackPoint\";\nimport {LatLngTuple} from \"leaflet\";\nimport {area, polygon} from \"@turf/turf\";\n\nexport interface MapService {\n  track2Polygon: (trackPoints: TrackPoint[]) => LatLngTuple[];\n  calcArea: (polygonPoints: TrackPoint[]) => number;\n}\n\nexport const createMapService = (): MapService => {\n  return {\n    track2Polygon(trackPoints: TrackPoint[]): LatLngTuple[] {\n      return trackPoints.map((trackPoint) => {\n        return [trackPoint.latitude, trackPoint.longitude];\n      });\n    },\n    calcArea(polygonPoints: TrackPoint[]): number {\n      let points: any = polygonPoints.map((trackPoint) => {\n        return [trackPoint.latitude, trackPoint.longitude];\n      });\n      let poly = polygon([points]);\n      return area(poly) / 1000000; // from m^2 to km^2\n    },\n  };\n};\n","import { Polyline } from \"react-leaflet\";\nimport { FunctionComponent } from \"react\";\nimport { Run } from \"../../../domain/run/Run\";\nimport { createMapService } from \"../../../domain/map/MapService\";\n\ninterface Props {\n  runs: Run[];\n}\n\nexport const RenderRuns: FunctionComponent<Props> = ({ runs }: Props) => {\n  const mapService = createMapService();\n\n  return (\n    <>\n      {runs.map((run, index) => {\n        return (\n          <Polyline\n            positions={mapService.track2Polygon(run.track.trackPoints)}\n          />\n        );\n      })}\n    </>\n  );\n};\n","import { FunctionComponent, useContext, useEffect } from \"react\";\nimport { Marker, useMap } from \"react-leaflet\";\nimport { RunnerContext } from \"../../../context/RunnerContext\";\n\ninterface Props {}\n\nexport const RenderPosition: FunctionComponent<Props> = () => {\n  const { runnerPosition } = useContext(RunnerContext);\n  const map = useMap();\n\n  useEffect(() => {\n    runnerPosition && map.setView(runnerPosition);\n  }, [runnerPosition]);\n\n  return <>{runnerPosition && <Marker position={runnerPosition} />}</>;\n};\n","import { FunctionComponent } from \"react\";\n\ninterface Props {\n  setShowRuns: any;\n}\n\nconst ShowRunControl: FunctionComponent<Props> = ({ setShowRuns }: Props) => {\n  return (\n    <div className=\"leaflet-top leaflet-right\">\n      <div className=\"leaflet-control\">\n        <button onClick={() => setShowRuns((oldState: any) => !oldState)}>\n          Show Runs\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ShowRunControl;\n","import { FunctionComponent, useContext, useEffect, useState } from \"react\";\nimport { MapContainer, TileLayer } from \"react-leaflet\";\nimport { RunnerContext } from \"../../../context/RunnerContext\";\nimport { RenderRuns } from \"./RenderRuns\";\nimport { RenderPosition } from \"./RenderPosition\";\nimport ShowRunControl from \"./ShowRunControl\";\nimport styled from \"styled-components\";\n\ninterface Props {}\n\nexport const MapMask: FunctionComponent<Props> = ({}: Props) => {\n  const { runs } = useContext(RunnerContext);\n  const [showRuns, setShowRuns] = useState(false);\n\n  return (\n    <RunMap\n      className=\"basicMap\"\n      center={[0, 0]}\n      zoom={20}\n      scrollWheelZoom={false}\n    >\n      <TileLayer\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png\"\n      />\n      {showRuns && <RenderRuns runs={runs} />}\n      <RenderPosition />\n      <ShowRunControl setShowRuns={setShowRuns} />\n    </RunMap>\n  );\n};\n\nconst RunMap = styled(MapContainer)`\n  width: 100%;\n  height: 400px;\n  border-radius: 8px;\n`;\n","import { FunctionComponent } from \"react\";\nimport { MapMask } from \"../component/MapMask\";\n\ntype Props = {};\n\nexport const Map: FunctionComponent<Props> = (props: Props) => {\n  //TODO: what do we need this component for?\n  return <MapMask />;\n};\n","import { createContext, ReactNode, useState } from \"react\";\nimport { Run } from \"../domain/run/Run\";\nimport { TrackPoint } from \"../domain/run/TrackPoint\";\n\ninterface CurrentRunProps {\n  startTime: number | undefined;\n  run: Run | undefined;\n  startRun: () => void;\n  stopRun: () => void;\n  addTrackPoint: (trackPoint: TrackPoint) => void;\n  resetRun: () => void;\n  isRunning: boolean;\n  setIsRunning: (isRunning: boolean) => void;\n}\nexport const CurrentRunContext = createContext<CurrentRunProps>(\n  {} as CurrentRunProps\n);\n\ninterface ProviderProps {\n  children: ReactNode;\n}\n\nexport const CurrentRunContextProvider = ({ children }: ProviderProps) => {\n  const [startTime, setStartTime] = useState<number>();\n  const [trackPoints, setTrackPoints] = useState<TrackPoint[]>([]);\n  const [run, setRun] = useState<Run>();\n  const [isRunning, setIsRunning] = useState(false);\n\n  const resetRun = () => {\n    setRun(undefined);\n    setStartTime(undefined);\n    setTrackPoints([]);\n  };\n  const addTrackPoint = (trackPoint: TrackPoint) => {\n    console.log(\"Add TrackPoint: \", trackPoint);\n    setTrackPoints((oldState) => [...oldState, trackPoint]);\n  };\n\n  const startRun = () => {\n    console.log(\"Start Run\");\n    setStartTime(Date.now());\n    setIsRunning(true);\n  };\n\n  const stopRun = () => {\n    console.log(\"Stop Run\");\n    const track = { trackPoints };\n    setRun({\n      track: track,\n      startTime: startTime ? startTime : Date.now(),\n      endTime: Date.now(),\n    });\n    setIsRunning(false);\n  };\n\n  return (\n    <CurrentRunContext.Provider\n      value={{\n        startTime,\n        isRunning,\n        setIsRunning,\n        run,\n        startRun,\n        stopRun,\n        addTrackPoint,\n        resetRun,\n      }}\n    >\n      {children}\n    </CurrentRunContext.Provider>\n  );\n};\n","import { Run } from \"./Run\";\nimport { LocalStorageKeys } from \"../../presentation/shared/LocalStorageKeys\";\n\nexport interface RunRepository {\n  getAllRuns: () => Run[];\n  saveRuns: (runs: Run[]) => void;\n}\n\nexport const createRunRepository = (): RunRepository => {\n  const storageRuns = localStorage.getItem(LocalStorageKeys.RUNS);\n  const runs: Run[] = storageRuns ? JSON.parse(storageRuns) : undefined;\n\n  const getAllRuns = (): Run[] => {\n    return runs;\n  };\n\n  const saveRuns = (runs: Run[]): void => {\n    localStorage.setItem(LocalStorageKeys.RUNS, JSON.stringify(runs));\n  };\n\n  return { saveRuns, getAllRuns };\n};\n","import { FunctionComponent, useContext, useEffect, useState } from \"react\";\nimport { CurrentRunContext } from \"../../context/CurrentRunContext\";\nimport { RunnerContext } from \"../../context/RunnerContext\";\nimport { createRunRepository } from \"../../domain/run/RunRepository\";\nimport { Button, ButtonGroup } from \"react-bootstrap\";\n\ninterface Props {}\n\nexport const CurrentRunControls: FunctionComponent<Props> = () => {\n  const { runnerPosition } = useContext(RunnerContext);\n  const { addTrackPoint, startRun, stopRun, run, resetRun, isRunning } =\n    useContext(CurrentRunContext);\n  const { addRun, runs } = useContext(RunnerContext);\n  const runRepository = createRunRepository();\n\n  useEffect(() => {\n    isRunning && savePositionAsTrack();\n  }, [runnerPosition]);\n\n  const savePositionAsTrack = () => {\n    runnerPosition &&\n      addTrackPoint({\n        latitude: runnerPosition.lat,\n        longitude: runnerPosition.lng,\n        time: Date.now(),\n      });\n  };\n\n  const handleStart = () => {\n    startRun();\n  };\n\n  const handleStop = () => {\n    stopRun();\n  };\n\n  const handleSave = () => {\n    console.log(\"Save run\");\n    runRepository.saveRuns([...runs, run!]);\n    addRun(run!);\n  };\n\n  const handleReset = () => {\n    console.log(\"Reset run\");\n    resetRun();\n  };\n\n  return (\n    <ButtonGroup size=\"lg\">\n      <Button onClick={handleStart} disabled={isRunning} variant=\"dark\">\n        Start\n      </Button>\n      <Button onClick={handleStop} disabled={!isRunning} variant=\"dark\">\n        Stop\n      </Button>\n      <Button onClick={handleSave} disabled={isRunning} variant=\"dark\">\n        Save\n      </Button>\n      <Button onClick={handleReset} disabled={isRunning} variant=\"dark\">\n        Reset\n      </Button>\n    </ButtonGroup>\n  );\n};\n","import * as React from \"react\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { RunnerContext } from \"../../context/RunnerContext\";\nimport { CurrentRunContext } from \"../../context/CurrentRunContext\";\nimport styled from \"styled-components\";\n\ntype Props = {\n  property: string;\n  value: string | number;\n};\n\nexport const InfoCard = ({ property, value }: Props) => {\n  return (\n    <Container>\n      <Property>{property}</Property>\n      <Value>{value}</Value>\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  width: 20%;\n  min-width: 120px;\n  background-color: #555;\n  border-radius: 10px;\n  padding: 10px;\n  margin: 10px 5px 10px 5px;\n`;\n\nconst Content = styled.div`\n  font-family: Open Sans Condensed, sans-serif;\n  font-weight: bold;\n  text-transform: uppercase;\n  color: #eee;\n`;\n\nconst Property = styled(Content)`\n  font-size: 28px;\n`;\n\nconst Value = styled(Content)`\n  font-size: 24px;\n`;\n","import * as React from \"react\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { RunnerContext } from \"../../context/RunnerContext\";\nimport { CurrentRunContext } from \"../../context/CurrentRunContext\";\nimport { InfoCard } from \"./InfoCard\";\nimport styled from \"styled-components\";\n\nexport const Dashboard = () => {\n  const { runnerSpeed } = useContext(RunnerContext);\n  const { startTime, isRunning } = useContext(CurrentRunContext);\n  const [runTime, setRunTime] = useState(0);\n  const [runInterval, setRunInterval] = useState<any>();\n\n  const updateRunTime = () => {\n    startTime && setRunTime(Date.now() - startTime);\n  };\n\n  useEffect(() => {\n    if (isRunning) {\n      const id = setInterval(() => {\n        updateRunTime();\n      }, 1000);\n      setRunInterval(id);\n    } else {\n      runInterval && clearInterval(runInterval);\n    }\n  }, [isRunning]);\n\n  return (\n    <Container>\n      <InfoCard\n        property={\"Speed\"}\n        value={runnerSpeed ? runnerSpeed + \" [km/h]\" : \"--\"}\n      />\n      <InfoCard\n        property={\"Time\"}\n        value={new Date(runTime).toISOString().substr(11, 8)}\n      />\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  height: 50%;\n  padding: 5px;\n  flex-wrap: wrap;\n`;\n","import React, { FunctionComponent } from \"react\";\nimport { Map } from \"../map/wiredComponent/Map\";\nimport { CurrentRunControls } from \"../controls/CurrentRunControls\";\nimport { Dashboard } from \"../dashboard/Dashboard\";\n\ninterface Props {}\n\nexport const StartRun: FunctionComponent<Props> = () => {\n  return (\n    <>\n      <Map />\n      <CurrentRunControls />\n      <Dashboard />\n    </>\n  );\n};\n","import React, {\n  FunctionComponent,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Map } from \"../map/wiredComponent/Map\";\nimport { CurrentRunControls } from \"../controls/CurrentRunControls\";\nimport { Dashboard } from \"../dashboard/Dashboard\";\nimport { MapContainer, Polyline, TileLayer, useMap } from \"react-leaflet\";\nimport { RenderRuns } from \"../map/component/RenderRuns\";\nimport { RenderPosition } from \"../map/component/RenderPosition\";\nimport ShowRunControl from \"../map/component/ShowRunControl\";\nimport { Button } from \"react-bootstrap\";\nimport { RunnerContext } from \"../../context/RunnerContext\";\nimport { Run } from \"../../domain/run/Run\";\nimport { createRunRepository } from \"../../domain/run/RunRepository\";\nimport { createMapService } from \"../../domain/map/MapService\";\nimport { LatLng } from \"leaflet\";\n\ninterface Props {\n  center: LatLng;\n}\n\nexport const ViewChanger: FunctionComponent<Props> = ({ center }) => {\n  const map = useMap();\n\n  useEffect(() => {\n    map.setView(center);\n  }, [center]);\n\n  return <></>;\n};\n","import React, {\n  FunctionComponent,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Map } from \"../map/wiredComponent/Map\";\nimport { CurrentRunControls } from \"../controls/CurrentRunControls\";\nimport { Dashboard } from \"../dashboard/Dashboard\";\nimport { MapContainer, Polyline, TileLayer, useMap } from \"react-leaflet\";\nimport { RenderRuns } from \"../map/component/RenderRuns\";\nimport { RenderPosition } from \"../map/component/RenderPosition\";\nimport ShowRunControl from \"../map/component/ShowRunControl\";\nimport { Button } from \"react-bootstrap\";\nimport { RunnerContext } from \"../../context/RunnerContext\";\nimport { Run } from \"../../domain/run/Run\";\nimport { createRunRepository } from \"../../domain/run/RunRepository\";\nimport { createMapService } from \"../../domain/map/MapService\";\nimport { LatLng } from \"leaflet\";\nimport { ViewChanger } from \"./ViewChanger\";\nimport styled from \"styled-components\";\n\ninterface Props {}\n\nexport const AbsolvedRuns: FunctionComponent<Props> = () => {\n  const { runs } = useContext(RunnerContext);\n  const [currentRun, setCurrentRun] = useState<Run>();\n  const [index, setIndex] = useState(0);\n\n  const centerFromRun = (run: Run): LatLng => {\n    const startPoint = run.track.trackPoints[0];\n    return new LatLng(startPoint.latitude, startPoint.longitude);\n  };\n\n  const [center, setCenter] = useState(\n    runs.length > 0 ? centerFromRun(runs[0]) : new LatLng(0, 0)\n  );\n  const mapService = createMapService();\n\n  useEffect(() => {\n    if (runs.length > 0) {\n      setCurrentRun(runs[0]);\n      setCenter(centerFromRun(runs[0]));\n    }\n  }, []);\n\n  useEffect(() => {\n    setCurrentRun(runs[index]);\n    setCenter(centerFromRun(runs[index]));\n  }, [index]);\n\n  const clickHandle = (change: number) => {\n    setIndex((oldIndex) => {\n      let newIndex;\n      newIndex =\n        oldIndex + change >= runs.length - 1\n          ? runs.length - 1\n          : oldIndex + change;\n      newIndex = newIndex < 0 ? 0 : newIndex;\n      return newIndex;\n    });\n  };\n\n  return (\n    <>\n      {currentRun && (\n        <RunDateTime>\n          {new Date(currentRun.startTime).toUTCString()}\n        </RunDateTime>\n      )}\n\n      <PastRunMap\n        className=\"basicMap\"\n        center={center}\n        zoom={20}\n        scrollWheelZoom={false}\n      >\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png\"\n        />\n        <ViewChanger center={center} />\n        {currentRun && (\n          <Polyline\n            positions={mapService.track2Polygon(currentRun.track.trackPoints)}\n          />\n        )}\n      </PastRunMap>\n\n      <div>\n        <RunSelectButton\n          variant={\"dark\"}\n          disabled={index <= 0}\n          onClick={() => clickHandle(-1)}\n        >\n          Zurück\n        </RunSelectButton>\n\n        <RunSelectButton\n          variant={\"dark\"}\n          disabled={index >= runs.length - 1}\n          onClick={() => clickHandle(1)}\n        >\n          Vor\n        </RunSelectButton>\n      </div>\n    </>\n  );\n};\n\nconst PastRunMap = styled(MapContainer)`\n  width: 100%;\n  height: 400px;\n  border-radius: 8px;\n`;\n\nconst RunSelectButton = styled(Button)`\n  width: 50%;\n`;\n\nconst RunDateTime = styled.div`\n  color: white;\n  text-align: center;\n  padding: 2px;\n`;\n","import { FunctionComponent } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Path } from \"../shared/Path\";\nimport styled from \"styled-components\";\n\ninterface Props {\n  to: string;\n  value: string;\n}\n\nexport const NavLink: FunctionComponent<Props> = ({ to, value }) => {\n  return <CustomLink to={to}>{value}</CustomLink>;\n};\n\nconst CustomLink = styled(Link)`\n  color: white;\n  font-size: 26px;\n  margin: 20px;\n`;\n","import { createRunRepository } from \"../../domain/run/RunRepository\";\nimport { createRunnerRepository } from \"../../domain/runner/RunnerRepository\";\nimport { useContext } from \"react\";\nimport { RunnerContext } from \"../../context/RunnerContext\";\n\nexport interface RunsController {\n  initRuns: () => void;\n  initRunner: () => void;\n  removeRunner: () => void;\n}\n\nexport const useRunsController = (): RunsController => {\n  const { setRunner, setRuns } = useContext(RunnerContext);\n  const runRepository = createRunRepository();\n  const runnerRepository = createRunnerRepository();\n\n  const initRuns = () => {\n    setRuns(runRepository.getAllRuns());\n  };\n\n  const initRunner = () => {\n    setRunner(runnerRepository.getRunner());\n  };\n\n  const removeRunner = () => {\n    setRunner(undefined);\n    runnerRepository.removeRunner();\n  };\n\n  return { initRuns, initRunner, removeRunner };\n};\n","import { FunctionComponent } from \"react\";\nimport { Path } from \"../shared/Path\";\nimport { NavLink } from \"./NavLink\";\nimport { Button } from \"react-bootstrap\";\nimport { useRunsController } from \"../../controller/runs/useRunsController\";\nimport styled from \"styled-components\";\nimport { Styles } from \"../shared/Styles\";\n\nexport const Navigation: FunctionComponent = () => {\n  const controller = useRunsController();\n  return (\n    <div>\n      <NavLink to={Path.NEW} value={\"Neu\"} />\n      <NavLink to={Path.RUNS} value={\"Läufe\"} />\n      <Logout onClick={() => controller.removeRunner()}>Logout</Logout>\n    </div>\n  );\n};\n\nconst Logout = styled.button`\n  color: white;\n  font-size: 26px;\n  margin: 20px;\n  background-color: ${Styles.BACKGROUND_COLOR_MAIN};\n  border: none;\n`;\n","import * as React from \"react\";\nimport { Navigation } from \"../navigation/Navigation\";\nimport styled from \"styled-components\";\n\nexport const Header = () => {\n  return (\n    <>\n      <Logo>Run Zone</Logo>\n      <Navigation />\n    </>\n  );\n};\n\nconst Logo = styled.h2`\n  color: #eee;\n  font-family: Open Sans Condensed, sans-serif;\n  font-size: 48px;\n  font-weight: bold;\n  line-height: 48px;\n  padding: 0 5px;\n  text-align: center;\n  text-transform: uppercase;\n  min-width: 200px;\n`;\n","import * as React from \"react\";\nimport { useContext } from \"react\";\nimport { RunnerContext } from \"../../context/RunnerContext\";\nimport styled from \"styled-components\";\nimport { Styles } from \"../shared/Styles\";\n\nexport const Home = () => {\n  const { runner } = useContext(RunnerContext);\n\n  return (\n    <Container>\n      <Welcome>\n        Willkommen\n        <br />\n        {runner!.runnerName}\n      </Welcome>\n    </Container>\n  );\n};\n\nconst Welcome = styled.h3`\n  font-family: ${Styles.FONT_FAMILY_MAIN};\n  text-align: center;\n  font-size: 3rem;\n  color: white;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 10% 0 0 0;\n`;\n","import React, { useContext, useEffect } from \"react\";\nimport \"./App.css\";\nimport { RunnerContext } from \"./context/RunnerContext\";\nimport { Login } from \"./presentation/login/Login\";\nimport { StartRun } from \"./presentation/startRun/StartRun\";\nimport { AbsolvedRuns } from \"./presentation/absolvedRuns/AbsolvedRuns\";\nimport { Path } from \"./presentation/shared/Path\";\nimport { Route, Routes } from \"react-router-dom\";\nimport { Header } from \"./presentation/header/Header\";\nimport { Home } from \"./presentation/home/Home\";\nimport { useRunsController } from \"./controller/runs/useRunsController\";\nimport styled from \"styled-components\";\n\nfunction App() {\n  const { runner } = useContext(RunnerContext);\n  const runsController = useRunsController();\n\n  useEffect(() => {\n    runsController.initRuns();\n    runsController.initRunner();\n  }, []);\n\n  if (!runner) {\n    return (\n      <OuterContainer>\n        <Login />\n      </OuterContainer>\n    );\n  }\n  return (\n    <OuterContainer>\n      <HeaderContainer>\n        <Header />\n      </HeaderContainer>\n\n      <Routes>\n        <Route path={Path.ROOT} element={<Home />} />\n        <Route path={Path.NEW} element={<StartRun />} />\n        <Route path={Path.RUNS} element={<AbsolvedRuns />} />\n      </Routes>\n    </OuterContainer>\n  );\n}\nconst OuterContainer = styled.div`\n  width: 80%;\n  height: 100%;\n  margin: auto;\n`;\n\nconst HeaderContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  padding: 1% 0 1% 0;\n  flex-wrap: wrap;\n  margin: 20px 0 20px 0;\n`;\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { RunnerContextProvider } from \"./context/RunnerContext\";\nimport { CurrentRunContextProvider } from \"./context/CurrentRunContext\";\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RunnerContextProvider>\n      <CurrentRunContextProvider>\n        <HashRouter>\n          <App />\n        </HashRouter>\n      </CurrentRunContextProvider>\n    </RunnerContextProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}